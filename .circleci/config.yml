version: 2.1

executors:

  build-executor-centos:
    docker:
      - image: opennmsbamboo/node-centos:develop

  build-executor-debian:
    docker:
      - image: opennmsbamboo/node-debian:develop

  node-executor:
    docker:
      - image: circleci/node:11

  docker-executor:
    docker:
      - image: docker:19.03.0-git

  docs-executor:
    docker:
      - image: opennms/asciibinder

  netlify-cli-executor:
    docker:
      - image: opennms/netlify-cli:2.8.3-b1

orbs:
  cloudsmith: cloudsmith/cloudsmith@1.0.3
  sign-packages:
    commands:
      setup-env:
        description: configure GnuPG and other configuration for signing -- expects gnupg2 to be installed
        steps:
          - run:
              name: Configure GPG Keychain
              command: |
                if [ -z "$GPG_PASSPHRASE" ]; then
                  echo "WARNING: no Base64 GPG passphrase supplied in CircleCI environment; assuming passwordless secret key"
                fi
                if [ -z "$GPG_SECRET_KEY" ]; then
                  echo "ERROR: you must set \$GPG_SECRET_KEY with the Base64-encoded contents of your GPG secret key"
                  exit 1
                fi
                export GNUPGHOME="$HOME/.gnupg"
                eval $(gpg-agent --daemon --allow-loopback-pinentry)
                install -d -m 700 "$GNUPGHOME"
                echo "* created $GNUPGHOME"
                echo "$GPG_SECRET_KEY" | base64 --decode | gpg --import --no-tty --batch --yes
                echo "* imported secret key"
                echo use-agent >> "$GNUPGHOME/gpg.conf"
                echo pinentry-mode loopback >> "$GNUPGHOME/gpg.conf"
                echo "passphrase-file $HOME/.gpg-passphrase" >> "$GNUPGHOME/gpg.conf"
                echo "* created $GNUPGHOME/gpg.conf:"
                cat "$GNUPGHOME/gpg.conf"
                echo allow-loopback-pinentry >> "$GNUPGHOME/gpg-agent.conf"
                echo "* created $GNUPGHOME/gpg-agent.conf"
                cat "$GNUPGHOME/gpg-agent.conf"
                echo RELOADAGENT | gpg-connect-agent
                echo "* (re)launched gpg-agent"
                echo "%topdir $HOME/rpmbuild" > "$HOME/.rpmmacros"
                echo "%_source_filedigest_algorithm 0" >> "$HOME/.rpmmacros"
                echo "%_binary_filedigest_algorithm 0" >> "$HOME/.rpmmacros"
                echo "%_source_payload w0.bzdio" >> "$HOME/.rpmmacros"
                echo "%_binary_payload w0.bzdio" >> "$HOME/.rpmmacros"
                echo "%__gpg_sign_cmd %{__gpg} gpg --batch --no-verbose --no-armor --no-secmem-warning --force-v3-sigs %{?_gpg_sign_cmd_extra_args:%{_gpg_sign_cmd_extra_args}} --passphrase-file "$HOME/.gpg-passphrase" -u '%{_gpg_name}' -sbo %{__signature_filename} %{__plaintext_filename}" >> "$HOME/.rpmmacros"
                echo "* created $HOME/.rpmmacros:"
                cat "$HOME/.rpmmacros"
      install-rpm-dependencies:
        description: install RPMs necessary for package signing
        steps:
          - run:
              name: Install RPM Signing Dependencies
              command: yum -y install rpm-sign gnupg2
      install-deb-dependencies:
        description: install Debian packages necessary for package signing
        steps:
          - run:
              name: Install Debian Signing Dependencies
              command: apt-get update && apt-get -y install gnupg2 debsigs
      sign-rpms:
        description: sign one or more RPM packages
        parameters:
          gpgname:
            description: the name or key ID to use when signing
            type: string
          packages:
            description: the RPM packages to sign
            type: string
        steps:
          - run:
              name: Sign RPM Packages
              command: |
                export GNUPGHOME="$HOME/.gnupg"
                echo "$GPG_PASSPHRASE" | base64 --decode > "$HOME/.gpg-passphrase" && chmod 600 "$HOME/.gpg-passphrase"
                rpmsign --key-id='<< parameters.gpgname >>' --resign << parameters.packages >>
      sign-debs:
        description: sign one or more Debian packages
        parameters:
          gpgname:
            description: the name or key ID to use when signing
            type: string
          packages:
            description: the Debian packages to sign
            type: string
          type:
            description: the signature type ("origin", "maint", or "archive")
            type: string
            default: origin
        steps:
          - run:
              name: Sign Debian Packages
              command: |
                export GNUPGHOME="$HOME/.gnupg"
                echo "$GPG_PASSPHRASE" | base64 --decode > "$HOME/.gpg-passphrase" && chmod 600 "$HOME/.gpg-passphrase"
                for package in << parameters.packages >>; do
                  debsigs --sign=<< parameters.type >> --verify -k "<< parameters.gpgname >>" "$package" || break
                done

commands:
  docker-registry-login:
    description: "Connect to Docker Registry"
    steps:
      - run:
          name: DockerHub Login
          command: |
            docker login -u ${DOCKERHUB_LOGIN} -p ${DOCKERHUB_PASS}
jobs:
  pre-build:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Get version number
          command: ./get-version.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - project
  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          name: Restore Package Cache
          keys:
            - npm-packages-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-packages-{{ .Branch }}
            - npm-packages-
      - run:
          name: Install Test Dependencies
          command: npm install mocha-junit-reporter
      - run:
          name: Install Dependencies
          command: npm --pure-lockfile --prefer-offline --no-progress install
      - save_cache:
          name: Save Package Cache
          key: npm-packages-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules/
      - run:
          name: Run Build
          command: npm run build
      - run:
          name: Run Tests
          command: |
              mkdir -p reports/mocha
              mkdir -p reports/eslint
              npm run test-circleci
              npm run eslint-circleci
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build-docs:
    executor: docs-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate documentation as static HTML
          command: asciibinder package -l debug docs
      - run:
          name: Create docs tarball
          command: |
            export HELM_VERSION=$(cat version.tag)
            mkdir -p ./dist/docs
            tar -czf "./dist/docs/opennms-helm_${HELM_VERSION}.tar.gz" -C docs/_package .
      - store_artifacts:
          path: ./dist/docs
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/docs

  make-tarball:
    executor: build-executor-centos
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create plugin tarball
          command: mkdir -p ./dist/packages && tar --exclude='package-lock.json' --exclude='.circleci' --exclude='.git' --exclude='./node_modules' --exclude='./dist/packages' -czf "./dist/packages/opennms-helm_$(cat version.tag).tar.gz" .
      - store_artifacts:
          path: ./dist/packages
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/packages

  make-docker-image:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - run:
          name: Build Docker Image
          command: |
            docker build \
              --build-arg OPENNMS_HELM_PKG=opennms-helm_$(cat version.tag).tar.gz \
              --build-arg GRAFANA_VERSION=$(cat grafana.version) \
              -t helm:$(cat version.tag) .
      - run:
          name: Export Docker Image as artefact
          command: docker image save helm:$(cat version.tag) -o helm-docker-image
      - store_artifacts:
          path: ./helm-docker-image
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/helm-docker-image
  make-rpm:
    executor: build-executor-centos
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create RPM package
          command: |
            ./makerpm.js --release "$(git log --pretty=format:%cd --date=short -1 | sed -e s,-,,g).${CIRCLE_BUILD_NUM}"
      - sign-packages/install-rpm-dependencies
      - sign-packages/setup-env
      - sign-packages/sign-rpms:
          gpgname: opennms@opennms.org
          packages: dist/packages/*.rpm
      - store_artifacts:
          path: ./dist/packages
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/packages

  make-deb:
    executor: build-executor-debian
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create DEB package
          command: |
            ./makedeb.js --release "$(git log --pretty=format:%cd --date=short -1 | sed -e s,-,,g).${CIRCLE_BUILD_NUM}"
      - sign-packages/install-deb-dependencies
      - sign-packages/setup-env
      - sign-packages/sign-debs:
          gpgname: opennms@opennms.org
          packages: dist/packages/*.deb
      - store_artifacts:
          path: ./dist/packages
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/packages

  publish-docker-image-latest:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - docker-registry-login
      - run:
          name: Load Docker Container Image file
          command: |
            docker image load -i ./helm-docker-image
      - run:
          name: Set DockerHub organization and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_USER+x} ]; then
                DOCKERHUB_PROJECT_USER=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_USERNAME instead which is set to ${DOCKERHUB_PROJECT_USER}."
            else
                DOCKERHUB_PROJECT_USER=$(echo "${DOCKERHUB_PROJECT_USER}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_USER with ${DOCKERHUB_PROJECT_USER}."
            fi
      - run:
          name: Set DockerHub project name and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_NAME+x} ]; then
                DOCKERHUB_PROJECT_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_REPONAME instead which is set to ${DOCKERHUB_PROJECT_NAME}."
            else
                DOCKERHUB_PROJECT_NAME=$(echo "${DOCKERHUB_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_NAME with ${DOCKERHUB_PROJECT_NAME}."
            fi
      - run:
          name: Tag Docker Container Images for release and publish to DockerHub
          command: |
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.tag)
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.tag)
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest

  publish-docker-image-bleeding:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - docker-registry-login
      - run:
          name: Load Docker Container Image file
          command: |
            docker image load -i ./helm-docker-image
      - run:
          name: Set DockerHub organization and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_USER+x} ]; then
                DOCKERHUB_PROJECT_USER=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_USERNAME instead which is set to ${DOCKERHUB_PROJECT_USER}."
            else
                DOCKERHUB_PROJECT_USER=$(echo "${DOCKERHUB_PROJECT_USER}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_USER with ${DOCKERHUB_PROJECT_USER}."
            fi
      - run:
          name: Set DockerHub project name and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_NAME+x} ]; then
                DOCKERHUB_PROJECT_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_REPONAME instead which is set to ${DOCKERHUB_PROJECT_NAME}."
            else
                DOCKERHUB_PROJECT_NAME=$(echo "${DOCKERHUB_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_NAME with ${DOCKERHUB_PROJECT_NAME}."
            fi
      - run:
          name: Tag Docker Container Images for bleeding and publish to DockerHub
          command: |
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:bleeding
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:bleeding

  publish-docs:
    executor: netlify-cli-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Extract docs from artifacts
          command: cd ~/project/dist/docs && tar xzf *.tar.gz
      - run:
          name: Deploy docs to Netlify
          command: netlify deploy --prod -d dist/docs/helm -s ${NETLIFY_SITE_ID}

  publish-rpm:
    executor: cloudsmith/default
    steps:
      - attach_workspace:
          at: ~/
      - cloudsmith/ensure-api-key
      - cloudsmith/install-cli
      - cloudsmith/publish:
          cloudsmith-repository: opennms/common
          package-format: rpm
          package-distribution: any-distro/any-version
          package-path: dist/packages/*.rpm

  publish-deb:
    executor: cloudsmith/default
    steps:
      - attach_workspace:
          at: ~/
      - cloudsmith/ensure-api-key
      - cloudsmith/install-cli
      - cloudsmith/publish:
          cloudsmith-repository: opennms/common
          package-format: deb
          package-distribution: any-distro/any-version
          package-path: dist/packages/*.deb

workflows:
  version: 2
  build-workflow:
    jobs:
      - pre-build:
          filters:
            tags:
              only: /^v.*/
      - build:
          requires:
            - pre-build
          filters:
            tags:
              only: /^v.*/
      - build-docs:
          requires:
            - pre-build
          filters:
            tags:
              only: /^v.*/
      - make-tarball:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - make-docker-image:
          requires:
            - make-tarball
          filters:
            tags:
              only: /^v.*/
      - make-rpm:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - make-deb:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - publish-docker-image-latest:
          requires:
            - make-docker-image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - publish-docker-image-bleeding:
          requires:
            - make-docker-image
          filters:
            branches:
              only: master
            tags:
              ignore: /^v.*/
      - publish-docs:
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
            tags:
              ignore: /^v.*/
      - publish-deb:
          requires:
            - make-deb
          filters:
            branches:
              only:
                - master
            tags:
              ignore: /^v.*/
      - publish-rpm:
          requires:
            - make-rpm
          filters:
            branches:
              only:
                - master
            tags:
              ignore: /^v.*/

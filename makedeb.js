#!/usr/bin/env node

/* jshint esversion: 6 */

const fs = require('fs-extra');
const os = require('os');
const path = require('path');
const spawn = require('child_process').spawnSync;
const copy = require('recursive-copy');
const rimraf = require('rimraf');
const which = require('which');
const program = require('commander');

const pkginfo = require('./package.json');
const plugininfo = require('./src/plugin.json');

try {
  which.sync('dpkg-buildpackage');
} catch (err) {
  console.log('dpkg-buildpackage executable not found');
  process.exit(1);
}

let version = pkginfo.version;
let release = 1;

if (version.indexOf('-SNAPSHOT')) {
  version = version.replace('-SNAPSHOT', '');
  release = 0;
}

program
  .version(pkginfo.version)
  .option('-r --release <release>', 'Specify release number of package')
  .parse(process.argv);

const options = program.opts();
if (options.release === undefined) {
  options.release = release;
}

pkginfo.version = version;
pkginfo.release = release;
release = options.release;


const date = new Date().toUTCString().replace(/ [^ ]+$/, ' +0000');
const changelog = `${pkginfo.name} (${version}-${release}) unstable; urgency=low

  * Autogenerated package.

 -- Benjamin Reed <ranger@opennms.org>  ${date}
`;

const pkgid   = plugininfo.id;
const workdir = path.join(process.cwd(), 'artifacts', pkgid);
const distdir = path.join(process.cwd(), 'dist');

rimraf.sync(workdir);
fs.mkdirsSync(workdir);
return copy(distdir, workdir, {
  dot: true,
  junk: false,
  filter: [
    '**/*',
    '!.git',
    '!.git/**',
    '!**/*.changes',
    '!**/*.deb',
    '!**/*.dsc',
    '!**/*.tar.gz',
    '!test',
    '!test/**',
  ]
}).then((results) => {
  console.log(results.length + ' files copied to ' + workdir);

  const debian = path.join(workdir, 'debian');
  fs.mkdirsSync(debian);

  return copy(path.join(process.cwd(), 'src', 'debian'), debian).then((_copyResults) => {
    console.log('debian/ directory copied');

    console.log('* writing changelog');
    const fh = fs.openSync(path.join(debian, 'changelog'), 'w+');
    fs.writeSync(fh, changelog);
    fs.closeSync(fh);

    console.log('* running dpkg-buildpackage');
    const ret = spawn('dpkg-buildpackage', [], {
      cwd: workdir,
      stdio: ['inherit', 'inherit', 'inherit'],
    });
    if (ret.error) {
      console.log('dpkg-buildpackage failed');
      process.exit(1);
    }

    rimraf.sync(workdir);

    process.exit(0);
  });
}).catch((error) => {
  console.log('Copy failed: ' + error);
  process.exit(1);
});

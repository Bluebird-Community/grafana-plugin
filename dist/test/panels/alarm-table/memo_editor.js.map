{"version":3,"sources":["../../../../src/panels/alarm-table/memo_editor.js"],"names":["memoEditorAsDirective","MemoEditorCtrl","$scope","datasourceSrv","timeSrv","type","alarmId","alarm","id","setupWithAlarm","self","$watch","memoChanged","didMemoChange","saveMemo","actionInProgress","getDatasource","then","ds","saveSticky","memoBody","saveJournal","refresh","catch","console","warn","err","deleteMemo","deleteSticky","deleteJournal","get","source","indexOf","message","getAlarm","refreshDashboard","memo","body","originalMemoBody","restrict","templateUrl","controller","scope"],"mappings":"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","file":"memo_editor.js","sourcesContent":["export class MemoEditorCtrl {\n  /** @ngInject */\n  constructor($scope, datasourceSrv, timeSrv) {\n    this.$scope = $scope;\n    this.datasourceSrv = datasourceSrv;\n    this.timeSrv = timeSrv;\n\n    // Require a valid type\n    if ($scope.type !== 'journal' && $scope.type !== 'sticky') {\n      throw \"Unsupported memo type\" + $scope.type;\n    }\n\n    // Save the id, this won't change during the lifetime of this controller\n    $scope.alarmId = $scope.alarm.id;\n    this.setupWithAlarm($scope.alarm);\n\n    // Register a listener for the memo body so that we can enable the Save button\n    // when the form is 'dirty'\n    let self = this;\n    $scope.$watch('memoBody', function() {\n      $scope.memoChanged = self.didMemoChange();\n    });\n\n    $scope.saveMemo = function() {\n      $scope.actionInProgress = true;\n      self.getDatasource().then(ds => {\n        if ($scope.type === 'sticky') {\n          return ds.saveSticky($scope.alarm.id, $scope.memoBody);\n        } else {\n          return ds.saveJournal($scope.alarm.id, $scope.memoBody);\n        }\n      })\n      .then(() => {\n        $scope.actionInProgress = false;\n        self.refresh();\n      })\n      .catch(err => {\n        $scope.actionInProgress = false;\n        console.warn('Failed to save memo.', err);\n        self.refresh();\n      })\n    };\n\n    $scope.deleteMemo = function() {\n      $scope.actionInProgress = true;\n      self.getDatasource().then(ds => {\n        if ($scope.type === 'sticky') {\n          return ds.deleteSticky($scope.alarm.id);\n        } else {\n          return ds.deleteJournal($scope.alarm.id);\n        }\n      })\n      .then(() => {\n        $scope.actionInProgress = false;\n        self.refresh();\n      })\n      .catch(err => {\n        $scope.actionInProgress = false;\n        console.warn('Failed to delete memo.', err);\n        self.refresh();\n      });\n    };\n  }\n\n  getDatasource() {\n    return this.datasourceSrv.get(this.$scope.source).then(ds => {\n      if (ds.type && ds.type.indexOf(\"fault-datasource\") < 0) {\n        throw {message: 'Only OpenNMS datasources are supported'};\n      } else {\n        return ds;\n      }\n    });\n  }\n\n  refresh() {\n    let self = this;\n    this.getDatasource().then(ds => {return ds.getAlarm(self.$scope.alarmId)})\n      .then(alarm => {\n        self.setupWithAlarm(alarm)\n      });\n    // Refresh the dashboard\n    self.timeSrv.refreshDashboard();\n  }\n\n  setupWithAlarm(alarm) {\n    this.$scope.alarm = alarm;\n    this.$scope.memo = this.$scope.alarm[this.$scope.type];\n    this.$scope.memoBody = this.$scope.memo ? this.$scope.memo.body : null;\n    this.$scope.memoChanged = false;\n  }\n\n  didMemoChange() {\n    let originalMemoBody = null;\n    if (this.$scope.memo) {\n      originalMemoBody = this.$scope.memo.body;\n    }\n    return originalMemoBody !== this.$scope.memoBody;\n  }\n}\n\n/** @ngInject */\nexport function memoEditorAsDirective() {\n  'use strict';\n  return {\n    restrict: 'E',\n    templateUrl: 'public/plugins/opennms-helm-app/panels/alarm-table/memo_editor.html',\n    controller: MemoEditorCtrl,\n    scope: {\n      alarm: '=',\n      source: '=',\n      type: '@',\n    }\n  };\n}\n"]}
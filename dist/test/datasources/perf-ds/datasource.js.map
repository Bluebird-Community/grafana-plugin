{"version":3,"sources":["../../../../src/datasources/perf-ds/datasource.js"],"names":["OpenNMSDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","basicAuth","withCredentials","interval","jsonData","timeInterval","timeout","parseInt","searchLimit","target","options","headers","Authorization","datasourceRequest","err","ret","statusText","cancelled","message","status","self","query","buildQuery","request","source","length","doOpenNMSRequest","data","method","then","response","console","warn","reject","processMeasurementsResponse","catch","decorateError","title","undefined","resolve","interpolatedQuery","first","interpolateValue","functions","findFunctions","func","metricFindNodeFilterQuery","apply","arguments","metricFindNodeResourceQuery","params","filterRule","limit","count","totalCount","results","each","node","nodeCriteria","id","toString","foreignId","foreignSource","push","text","label","value","expandable","encodeURIComponent","getNodeResource","depth","children","resource","resourceWithoutNodePrefix","match","start","range","from","valueOf","end","to","step","Math","floor","maxDataPoints","intervalMs","targets","transient","hide","Attribute","nodeId","resourceId","attribute","aggregation","subattribute","datasource","fallbackAttribute","concat","interpolateSourceVariables","scopedVars","interpolatedSource","getRemoteResourceId","Expression","expression","interpolateExpressionVariables","Filter","filter","interpolatedFilterParms","interpolateVariables","filterParameters","keys","filters","map","filterParms","parameters","key","callback","entry","object","attributes","variables","templateVariable","variable","isString","current","option","comparator","orderBy","order","sysName","interpolatedNodeId","flattenResourcesWithAttributes","interpolatedResourceId","remoteResourceId","toLowerCase","rrdGraphAttributes","indexOf","sort","labels","columns","timestamps","metadata","series","i","j","nRows","nCols","datapoints","values","resources","format","resourcesWithAttributes","Object","prefix"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;;IAEaA,iB,WAAAA,iB;AAEX,6BAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,SAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,SAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,SAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,SAAKC,SAAL,GAAiBP,iBAAiBO,SAAlC;AACA,SAAKC,eAAL,GAAuBR,iBAAiBQ,eAAxC;AACA;AACA,SAAKC,QAAL,GAAgB,CAACT,iBAAiBU,QAAjB,IAA6B,EAA9B,EAAkCC,YAAlD;;AAEA,QAAIX,iBAAiBU,QAAjB,IAA6BV,iBAAiBU,QAAjB,CAA0BE,OAA3D,EAAoE;AAChE,WAAKA,OAAL,GAAeC,SAASb,iBAAiBU,QAAjB,CAA0BE,OAAnC,EAA2C,EAA3C,IAAiD,IAAhE;AACH;;AAED,SAAKX,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;;AAEA,SAAKW,WAAL,GAAmB,EAAnB;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;;;qCAEgBC,O,EAAS;AACxB,UAAI,KAAKT,SAAL,IAAkB,KAAKC,eAA3B,EAA4C;AAC1CQ,gBAAQR,eAAR,GAA0B,IAA1B;AACD;AACD,UAAI,KAAKD,SAAT,EAAoB;AAClBS,gBAAQC,OAAR,GAAkBD,QAAQC,OAAR,IAAmB,EAArC;AACAD,gBAAQC,OAAR,CAAgBC,aAAhB,GAAgC,KAAKX,SAArC;AACD;;AAEDS,cAAQX,GAAR,GAAc,KAAKA,GAAL,GAAWW,QAAQX,GAAjC;AACA,UAAI,KAAKO,OAAT,EAAkB;AAChBI,gBAAQJ,OAAR,GAAkB,KAAKA,OAAvB;AACD;;AAED,aAAO,KAAKV,UAAL,CAAgBiB,iBAAhB,CAAkCH,OAAlC,CAAP;AACD;;;kCAEaI,G,EAAK;AACjB,UAAIC,MAAMD,GAAV;AACA,UAAIA,IAAIA,GAAR,EAAa;AACXC,cAAMD,IAAIA,GAAV;AACD;AACD,UAAIE,aAAaD,IAAIC,UAAJ,IAAkB,iBAAnC;;AAEA;AACA,UAAID,IAAIE,SAAR,EAAmB;AACjB,eAAOF,IAAIE,SAAX;AACAD,qBAAa,oBAAb;AACD;AACD,UAAIF,IAAIG,SAAR,EAAmB;AACjB,eAAOH,IAAIG,SAAX;AACAD,qBAAa,oBAAb;AACD;;AAED,UAAI,CAACD,IAAIG,OAAT,EAAkB;AAChBH,YAAIG,OAAJ,GAAcF,UAAd;AACD;AACD,UAAI,CAACD,IAAII,MAAT,EAAiB;AACfJ,YAAII,MAAJ,GAAa,OAAb;AACD;AACD,aAAOJ,GAAP;AACD;;;0BAEKL,O,EAAS;AACb,UAAMU,OAAO,IAAb;;AAEA;AACA,UAAIC,QAAQ,KAAKC,UAAL,CAAgBZ,OAAhB,CAAZ;;AAEA;AACA,UAAIa,OAAJ;AACA,UAAIF,MAAMG,MAAN,CAAaC,MAAb,GAAsB,CAA1B,EAA6B;AAC3BF,kBAAU,KAAKG,gBAAL,CAAsB;AAC9B3B,eAAK,oBADyB;AAE9B4B,gBAAMN,KAFwB;AAG9BO,kBAAQ,MAHsB;AAI9BjB,mBAAS,EAAC,gBAAgB,kBAAjB;AAJqB,SAAtB,CAAV;AAMD,OAPD,MAOO;AACL;AACA,eAAO,EAAC,QAAQ,EAAT,EAAP;AACD;;AAED;AACA,aAAOY,QAAQM,IAAR,CAAa,UAACC,QAAD,EAAc;AAChC,YAAIA,SAASX,MAAT,KAAoB,GAAxB,EAA6B;AAC3BY,kBAAQC,IAAR,CAAa,wCAAb,EAAsDF,QAAtD;AACA,iBAAOV,KAAKzB,EAAL,CAAQsC,MAAR,CAAeH,QAAf,CAAP;AACD;AACD,eAAOrC,kBAAkByC,2BAAlB,CAA8CJ,QAA9C,CAAP;AACD,OANM,EAMJK,KANI,CAME,eAAO;AACd,eAAOf,KAAKzB,EAAL,CAAQsC,MAAR,CAAeb,KAAKgB,aAAL,CAAmBtB,GAAnB,CAAf,CAAP;AACD,OARM,CAAP;AASD;;AAED;;;;qCACiB;AAAA;;AACf,aAAO,KAAKY,gBAAL,CAAsB;AAC3B3B,aAAK,YADsB;AAE3B6B,gBAAQ;AAFmB,OAAtB,EAGJC,IAHI,CAGC,oBAAY;AAClB,YAAIC,SAASX,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,EAACA,QAAQ,SAAT,EAAoBD,SAAS,wBAA7B,EAAuDmB,OAAO,SAA9D,EAAP;AACD,SAFD,MAEO;AACL,iBAAO;AACLlB,oBAAQ,QADH;AAELD,qBAAS,yDAFJ;AAGLmB,mBAAO,yBAAyBP,SAASX;AAHpC,WAAP;AAKD;AACF,OAbM,EAaJgB,KAbI,CAaE,eAAO;AACd,eAAO,MAAKC,aAAL,CAAmBtB,GAAnB,CAAP;AACD,OAfM,CAAP;AAgBD;;AAED;;;;oCACgBO,K,EAAO;AACrB,UAAIA,UAAU,IAAV,IAAkBA,UAAUiB,SAA5B,IAAyCjB,UAAU,EAAvD,EAA2D;AACzD,eAAO,KAAK1B,EAAL,CAAQ4C,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAED,UAAIC,oBAAoB,iBAAEC,KAAF,CAAQ,KAAKC,gBAAL,CAAsBrB,KAAtB,CAAR,CAAxB;;AAEA,UAAImB,sBAAsBF,SAA1B,EAAqC;AACnC,YAAMK,YAAY,sCAAkBC,aAAlB,CAAgCJ,iBAAhC,CAAlB;;AADmC;AAAA;AAAA;;AAAA;AAGnC,+BAAmBG,SAAnB,8HAA8B;AAAA,gBAAnBE,IAAmB;;AAC5B,gBAAIA,KAAK7C,IAAL,KAAc,YAAlB,EAAgC;AAC9B,qBAAO,KAAK8C,yBAAL,CAA+BC,KAA/B,CAAqC,IAArC,EAA2CF,KAAKG,SAAhD,CAAP;AACD,aAFD,MAEO,IAAIH,KAAK7C,IAAL,KAAc,eAAlB,EAAmC;AACxC,qBAAO,KAAKiD,2BAAL,CAAiCF,KAAjC,CAAuC,IAAvC,EAA6CF,KAAKG,SAAlD,CAAP;AACD,aAFM,MAEA;AACLjB,sBAAQC,IAAR,CAAa,6CAA6CQ,iBAA1D,EAA6EK,IAA7E;AACD;AACF;AAXkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYpC;;AAED,aAAO,KAAKlD,EAAL,CAAQ4C,OAAR,CAAgB,EAAhB,CAAP;AACD;;;8CAEyBlB,K,EAAO;AAC/B,aAAO,KAAKK,gBAAL,CAAsB;AAC3B3B,aAAK,aADsB;AAE3B6B,gBAAQ,KAFmB;AAG3BsB,gBAAQ;AACNC,sBAAY9B,KADN;AAEN+B,iBAAO;AAFD;AAHmB,OAAtB,EAOJvB,IAPI,CAOC,UAAUC,QAAV,EAAoB;AAC1B,YAAIA,SAASH,IAAT,CAAc0B,KAAd,GAAsBvB,SAASH,IAAT,CAAc2B,UAAxC,EAAoD;AAClDvB,kBAAQC,IAAR,CAAa,oBAAoBF,SAASH,IAAT,CAAc2B,UAAlC,GAA+C,qBAA/C,GAAuExB,SAASH,IAAT,CAAc0B,KAArF,GAA6F,gBAA1G;AACD;AACD,YAAIE,UAAU,EAAd;AACA,yBAAEC,IAAF,CAAO1B,SAASH,IAAT,CAAc8B,IAArB,EAA2B,UAAUA,IAAV,EAAgB;AACzC,cAAIC,eAAeD,KAAKE,EAAL,CAAQC,QAAR,EAAnB;AACA,cAAIH,KAAKI,SAAL,KAAmB,IAAnB,IAA2BJ,KAAKK,aAAL,KAAuB,IAAtD,EAA4D;AAC1DJ,2BAAeD,KAAKK,aAAL,GAAqB,GAArB,GAA2BL,KAAKI,SAA/C;AACD;AACDN,kBAAQQ,IAAR,CAAa,EAACC,MAAMP,KAAKQ,KAAZ,EAAmBC,OAAOR,YAA1B,EAAwCS,YAAY,IAApD,EAAb;AACD,SAND;AAOA,eAAOZ,OAAP;AACD,OApBM,CAAP;AAqBD;;;gDAE2BlC,K,EAAO;AACjC,aAAO,KAAKK,gBAAL,CAAsB;AAC3B3B,aAAK,qBAAqBqE,mBAAmB3E,kBAAkB4E,eAAlB,CAAkChD,KAAlC,CAAnB,CADC;AAE3BO,gBAAQ,KAFmB;AAG3BsB,gBAAQ;AACNoB,iBAAO;AADD;AAHmB,OAAtB,EAMJzC,IANI,CAMC,UAAUC,QAAV,EAAoB;AAC1B,YAAIyB,UAAU,EAAd;AACA,yBAAEC,IAAF,CAAO1B,SAASH,IAAT,CAAc4C,QAAd,CAAuBC,QAA9B,EAAwC,UAAUA,QAAV,EAAoB;AAC1D,cAAIC,4BAA4BD,SAASb,EAAT,CAAYe,KAAZ,CAAkB,4BAAlB,CAAhC;AACA,cAAID,yBAAJ,EAA+B;AAC7BlB,oBAAQQ,IAAR,CAAa,EAACC,MAAMS,0BAA0B,CAA1B,CAAP,EAAqCN,YAAY,IAAjD,EAAb;AACD;AACF,SALD;AAMA,eAAOZ,OAAP;AACD,OAfM,CAAP;AAgBD;;;+BAEU7C,O,EAAS;AAClB,UAAIU,OAAO,IAAX;AAAA,UACEuD,QAAQjE,QAAQkE,KAAR,CAAcC,IAAd,CAAmBC,OAAnB,EADV;AAAA,UAEEC,MAAMrE,QAAQkE,KAAR,CAAcI,EAAd,CAAiBF,OAAjB,EAFR;AAAA,UAGEG,OAAOC,KAAKC,KAAL,CAAW,CAACJ,MAAMJ,KAAP,IAAgBjE,QAAQ0E,aAAnC,CAHT;AAIEH,aAAQA,OAAOvE,QAAQ2E,UAAhB,GAA8B3E,QAAQ2E,UAAtC,GAAmDJ,IAA1D;;AAEF,UAAI5D,QAAQ;AACV,iBAASsD,KADC;AAEV,eAAOI,GAFG;AAGV,gBAAQE,IAHE;AAIV,mBAAWvE,QAAQ0E,aAJT;AAKV,kBAAU,EALA;AAMV,sBAAc;AANJ,OAAZ;;AASA,uBAAE5B,IAAF,CAAO9C,QAAQ4E,OAAf,EAAwB,UAAU7E,MAAV,EAAkB;AACxC,YAAI8E,YAAY,OAAhB;AACA,YAAI9E,OAAO+E,IAAX,EAAiB;AACfD,sBAAY,IAAZ;AACD;;AAED,YAAI9E,OAAOX,IAAP,KAAgB,qBAAU2F,SAA9B,EAAyC;AACvC,cAAI,EAAGhF,OAAOiF,MAAP,IAAiBjF,OAAOkF,UAAxB,IAAsClF,OAAOmF,SAAhD,CAAJ,EAAiE;AAC/D;AACD;;AAED,cAAI3B,QAAQxD,OAAOwD,KAAnB;AACA,cAAIA,UAAU3B,SAAV,IAAuB2B,UAAU,EAArC,EAAyC;AACvCA,oBAAQxD,OAAOmF,SAAf;AACD;;AAED;AACA,cAAIpE,SAAS;AACX,2BAAef,OAAOoF,WADX;AAEX,yBAAapF,OAAOmF,SAFT;AAGX,qBAAS3B,KAHE;AAIX,0BAAcxD,OAAOkF,UAJV;AAKX,sBAAUlF,OAAOiF,MALN,EAKc;AACzB,yBAAaH;AANF,WAAb;;AASA,cAAI9E,OAAOqF,YAAP,KAAwBxD,SAAxB,IAAqC7B,OAAOqF,YAAP,KAAwB,EAAjE,EAAqE;AACnEtE,mBAAOuE,UAAP,GAAoBtF,OAAOqF,YAA3B;AACD;AACD,cAAIrF,OAAOuF,iBAAP,KAA6B1D,SAA7B,IAA0C7B,OAAOuF,iBAAP,KAA6B,EAA3E,EAA+E;AAC7ExE,mBAAO,oBAAP,IAA+Bf,OAAOuF,iBAAtC;AACD;;AAED;AACA3E,gBAAMG,MAAN,GAAeH,MAAMG,MAAN,CAAayE,MAAb,CAAoB7E,KAAK8E,0BAAL,CAAgC1E,MAAhC,EAAwCd,QAAQyF,UAAhD,EAA4D,UAACC,kBAAD,EAAwB;AACrH;AACAA,+BAAmBT,UAAnB,GAAgClG,kBAAkB4G,mBAAlB,CAAsCD,mBAAmBV,MAAzD,EAAiEU,mBAAmBT,UAApF,CAAhC;AACA,mBAAOS,mBAAmBV,MAA1B;AACD,WAJkC,CAApB,CAAf;AAKD,SAjCD,MAiCO,IAAIjF,OAAOX,IAAP,KAAgB,qBAAUwG,UAA9B,EAA0C;AAC/C,cAAI,EAAG7F,OAAOwD,KAAP,IAAgBxD,OAAO8F,UAA1B,CAAJ,EAA4C;AAC1C;AACD;;AAED;AACA,cAAIA,aAAa;AACf,qBAAS9F,OAAOwD,KADD;AAEf,qBAASxD,OAAO8F,UAFD;AAGf,yBAAahB;AAHE,WAAjB;;AAMA;AACAlE,gBAAMkF,UAAN,GAAmBlF,MAAMkF,UAAN,CAAiBN,MAAjB,CAAwB7E,KAAKoF,8BAAL,CAAoCD,UAApC,EAAgD7F,QAAQyF,UAAxD,CAAxB,CAAnB;AACD,SAdM,MAcA,IAAI1F,OAAOX,IAAP,KAAgB,qBAAU2G,MAA9B,EAAsC;AAC3C,cAAI,CAAGhG,OAAOiG,MAAd,EAAwB;AACtB;AACD;;AAED;AACA,cAAIC,0BAA0BvF,KAAKwF,oBAAL,CAA0BnG,OAAOoG,gBAAjC,EAAmD,iBAAEC,IAAF,CAAOrG,OAAOoG,gBAAd,CAAnD,EAAoFnG,QAAQyF,UAA5F,CAA9B;;AAEA,cAAIY,UAAU,iBAAEC,GAAF,CAAML,uBAAN,EAA+B,UAACM,WAAD,EAAiB;AAC5D;AACA,gBAAIC,aAAa,EAAjB;AACA,6BAAE1D,IAAF,CAAOyD,WAAP,EAAoB,UAAU/C,KAAV,EAAiBiD,GAAjB,EAAsB;AACxC;AACA,kBAAIjD,UAAU5B,SAAV,IAAuB4B,UAAU,EAAjC,IAAuCA,UAAU,IAArD,EAA2D;AACzD;AACD;;AAEDgD,yBAAWnD,IAAX,CAAgB;AACd,uBAAOoD,GADO;AAEd,yBAASjD;AAFK,eAAhB;AAID,aAVD;;AAYA,mBAAO;AACL,sBAAQzD,OAAOiG,MAAP,CAAc1G,IADjB;AAEL,2BAAakH;AAFR,aAAP;AAID,WAnBa,CAAd;;AAqBA;AACA;AACA,cAAI,CAAC7F,MAAMqF,MAAX,EAAmB;AACjBrF,kBAAMqF,MAAN,GAAeK,OAAf;AACD,WAFD,MAEO;AACL1F,kBAAMqF,MAAN,GAAerF,MAAMqF,MAAN,CAAaT,MAAb,CAAoBc,OAApB,CAAf;AACD;AACF;AACF,OA1FD;;AA4FA,aAAO1F,KAAP;AACD;;;+CAE0BG,M,EAAQ2E,U,EAAYiB,Q,EAAU;AACvD,aAAO,KAAKR,oBAAL,CAA0BpF,MAA1B,EAAkC,CAAC,QAAD,EAAW,YAAX,EAAyB,WAAzB,EAAsC,YAAtC,EAAoD,OAApD,CAAlC,EAAgG2E,UAAhG,EAA4GiB,QAA5G,CAAP;AACD;;;mDAE8Bb,U,EAAYJ,U,EAAY;AACrD,aAAO,KAAKS,oBAAL,CAA0BL,UAA1B,EAAsC,CAAC,OAAD,EAAU,OAAV,CAAtC,EAA0DJ,UAA1D,CAAP;AACD;;;qCAEgBjC,K,EAAOiC,U,EAAY;AAClC,aAAO,iBAAEa,GAAF,CAAM,KAAKJ,oBAAL,CAA0B,EAAC,SAAS1C,KAAV,EAA1B,EAA4C,CAAC,OAAD,CAA5C,EAAuDiC,UAAvD,CAAN,EAA0E,UAASkB,KAAT,EAAgB;AAC/F,eAAOA,MAAMnD,KAAb;AACD,OAFM,CAAP;AAGD;;;yCAEoBoD,M,EAAQC,U,EAAYpB,U,EAAYiB,Q,EAAU;AAC7D;AACA,UAAII,YAAY,EAAhB;AACA,uBAAEhE,IAAF,CAAO,KAAK3D,WAAL,CAAiB2H,SAAxB,EAAmC,UAASC,gBAAT,EAA2B;AAC5D,YAAIC,WAAW;AACb1H,gBAAMyH,iBAAiBzH,IADV;AAEbkE,iBAAO;AAFM,SAAf;;AAKA;AACA,YAAIiC,cAAcA,WAAWuB,SAAS1H,IAApB,MAA8BsC,SAAhD,EAA2D;AACzDoF,mBAASxD,KAAT,CAAeH,IAAf,CAAoBoC,WAAWuB,SAAS1H,IAApB,EAA0BkE,KAA9C;AACD,SAFD,MAEO;AACL;AACA,cAAI,iBAAEyD,QAAF,CAAWF,iBAAiBG,OAAjB,CAAyB1D,KAApC,CAAJ,EAAgD;AAC9CwD,qBAASxD,KAAT,CAAeH,IAAf,CAAoB0D,iBAAiBG,OAAjB,CAAyB1D,KAA7C;AACD,WAFD,MAEO;AACL,6BAAEV,IAAF,CAAOiE,iBAAiBG,OAAjB,CAAyB1D,KAAhC,EAAuC,UAASA,KAAT,EAAgB;AACrD,kBAAIA,UAAU,QAAd,EAAwB;AACtB,iCAAEV,IAAF,CAAOiE,iBAAiB/G,OAAxB,EAAiC,UAASmH,MAAT,EAAiB;AAChD;AACA,sBAAIA,OAAO3D,KAAP,KAAiB,QAArB,EAA+B;AAC7BwD,6BAASxD,KAAT,CAAeH,IAAf,CAAoB8D,OAAO3D,KAA3B;AACD;AACF,iBALD;AAMD,eAPD,MAOO;AACLwD,yBAASxD,KAAT,CAAeH,IAAf,CAAoBG,KAApB;AACD;AACF,aAXD;AAYD;AACF;;AAEDsD,kBAAUzD,IAAV,CAAe2D,QAAf;AACD,OA9BD;AA+BA,aAAO,8BAAYJ,MAAZ,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CJ,QAA3C,CAAP;AACD;;;mCAkEc/F,K,EAAO;AACpB,aAAO,KAAKK,gBAAL,CAAsB;AAC3B3B,aAAK,aADsB;AAE3B6B,gBAAQ,KAFmB;AAG3BsB,gBAAQ;AACNE,iBAAO,KAAK5C,WADN;AAENkE,iBAAO,KAFD;AAGNoD,sBAAY,OAHN;AAINC,mBAAS,IAJH;AAKNC,iBAAO,KALD;AAMN/D,iBAAO,MAAM5C,KAAN,GAAc,GANf;AAON4G,mBAAS,MAAM5G,KAAN,GAAc,GAPjB;AAQN,mCAAyB,MAAMA,KAAN,GAAc,GARjC;AASN,oCAA0B,MAAMA,KAAN,GAAc,GATlC;AAUN,uBAAaA,QAAQ,GAVf,CAUmB;AAVnB;AAHmB,OAAtB,CAAP;AAgBD;;;sDAEiCqE,M,EAAQ;AACxC,UAAIwC,qBAAqB,iBAAEzF,KAAF,CAAQ,KAAKC,gBAAL,CAAsBgD,MAAtB,CAAR,CAAzB;;AAEA,aAAO,KAAKhE,gBAAL,CAAsB;AAC3B3B,aAAK,6BAA6BqE,mBAAmB8D,kBAAnB,CADP;AAE3BtG,gBAAQ,KAFmB;AAG3BsB,gBAAQ;AACNoB,iBAAO,CAAC;AADF;AAHmB,OAAtB,EAMJzC,IANI,CAMC,UAAU0B,OAAV,EAAmB;AACzB,eAAO9D,kBAAkB0I,8BAAlB,CAAiD,CAAC5E,QAAQ5B,IAAT,CAAjD,EAAiE,EAAjE,CAAP;AACD,OARM,CAAP;AASD;;;0CAEqB;AACpB,aAAO,KAAKD,gBAAL,CAAsB;AAC3B3B,aAAK,4BADsB;AAE3B6B,gBAAQ;AAFmB,OAAtB,CAAP;AAID;;;sCAEiB8D,M,EAAQC,U,EAAYtE,K,EAAO;AAC3C,UAAI6G,qBAAqB,iBAAEzF,KAAF,CAAQ,KAAKC,gBAAL,CAAsBgD,MAAtB,CAAR,CAAzB;AAAA,UACI0C,yBAAyB,iBAAE3F,KAAF,CAAQ,KAAKC,gBAAL,CAAsBiD,UAAtB,CAAR,CAD7B;AAEA,UAAI0C,mBAAmB5I,kBAAkB4G,mBAAlB,CAAsC6B,kBAAtC,EAA0DE,sBAA1D,CAAvB;;AAEA,aAAO,KAAK1G,gBAAL,CAAsB;AAC3B3B,aAAK,qBAAqBqE,mBAAmBiE,gBAAnB,CADC;AAE3BzG,gBAAQ,KAFmB;AAG3BsB,gBAAQ;AACNoB,iBAAO,CAAC;AADF;AAHmB,OAAtB,EAMJzC,IANI,CAMC,UAAU0B,OAAV,EAAmB;AACzBlC,gBAAQA,MAAMiH,WAAN,EAAR;AACA,YAAIf,aAAa,EAAjB;AACA,yBAAE/D,IAAF,CAAOD,QAAQ5B,IAAR,CAAa4G,kBAApB,EAAwC,UAAUrE,KAAV,EAAiBiD,GAAjB,EAAsB;AAC5D,cAAIA,IAAImB,WAAJ,GAAkBE,OAAlB,CAA0BnH,KAA1B,KAAoC,CAAxC,EAA2C;AACzCkG,uBAAWxD,IAAX,CAAgBoD,GAAhB;AACD;AACF,SAJD;AAKAI,mBAAWkB,IAAX;;AAEA,eAAOlB,UAAP;AACD,OAjBM,CAAP;AAkBD;;;gDA/HkCzF,Q,EAAU;AAC3C,UAAI4G,SAAS5G,SAASH,IAAT,CAAc+G,MAA3B;AACA,UAAIC,UAAU7G,SAASH,IAAT,CAAcgH,OAA5B;AACA,UAAIC,aAAa9G,SAASH,IAAT,CAAciH,UAA/B;AACA,UAAIC,WAAW/G,SAASH,IAAT,CAAckH,QAA7B;AACA,UAAIC,SAAS,EAAb;AACA,UAAIC,CAAJ,EAAOC,CAAP,EAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,UAAxB;;AAEA,UAAIP,eAAetG,SAAnB,EAA8B;AAC5B2G,gBAAQL,WAAWnH,MAAnB;AACAyH,gBAAQP,QAAQlH,MAAhB;;AAEA,aAAKsH,IAAI,CAAT,EAAYA,IAAIG,KAAhB,EAAuBH,GAAvB,EAA4B;AAC1BI,uBAAa,EAAb;AACA,eAAKH,IAAI,CAAT,EAAYA,IAAIC,KAAhB,EAAuBD,GAAvB,EAA4B;AAC1B;AACA,gBAAIJ,WAAWI,CAAX,IAAgBlH,SAASH,IAAT,CAAcgD,KAA9B,IAAuCiE,WAAWI,CAAX,IAAgBlH,SAASH,IAAT,CAAcoD,GAAzE,EAA8E;AAC5E;AACD;;AAEDoE,uBAAWpF,IAAX,CAAgB,CAAC4E,QAAQI,CAAR,EAAWK,MAAX,CAAkBJ,CAAlB,CAAD,EAAuBJ,WAAWI,CAAX,CAAvB,CAAhB;AACD;;AAED,cAAI/E,QAAQyE,OAAOK,CAAP,CAAZ;AACA,cAAIF,YAAYA,SAASQ,SAAzB,EAAoC;AAClCpF,oBAAQ,sCAAkBqF,MAAlB,CAAyBrF,KAAzB,EAAgC4E,QAAhC,CAAR;AACD;;AAEDC,iBAAO/E,IAAP,CAAY;AACVtD,oBAAQwD,KADE;AAEVkF,wBAAYA;AAFF,WAAZ;AAID;AACF;;AAED,aAAO,EAACxH,MAAMmH,MAAP,EAAP;AACD;;;mDAEqCO,S,EAAWE,uB,EAAyB;AACxE,uBAAE/F,IAAF,CAAO6F,SAAP,EAAkB,UAAU7E,QAAV,EAAoB;AACpC,YAAIA,SAAS+D,kBAAT,KAAgCjG,SAAhC,IAA6CkH,OAAO1C,IAAP,CAAYtC,SAAS+D,kBAArB,EAAyC9G,MAAzC,GAAkD,CAAnG,EAAsG;AACpG8H,kCAAwBxF,IAAxB,CAA6BS,QAA7B;AACD;AACD,YAAIA,SAASD,QAAT,KAAsBjC,SAAtB,IAAmCkC,SAASD,QAAT,CAAkBC,QAAlB,CAA2B/C,MAA3B,GAAoC,CAA3E,EAA8E;AAC5EhC,4BAAkB0I,8BAAlB,CAAiD3D,SAASD,QAAT,CAAkBC,QAAnE,EAA6E+E,uBAA7E;AACD;AACF,OAPD;AAQA,aAAOA,uBAAP;AACD;;;oCAEsB7D,M,EAAQ;AAC7B,UAAI+D,SAAS,EAAb;AACA,UAAI/D,OAAO8C,OAAP,CAAe,GAAf,IAAsB,CAA1B,EAA6B;AAC3BiB,iBAAS,aAAT;AACD,OAFD,MAEO;AACLA,iBAAS,OAAT;AACD;AACD,aAAOA,SAAS/D,MAAT,GAAkB,GAAzB;AACD;;;wCAE0BA,M,EAAQC,U,EAAY;AAC7C,aAAOlG,kBAAkB4E,eAAlB,CAAkCqB,MAAlC,IAA4C,GAA5C,GAAkDC,UAAzD;AACD","file":"datasource.js","sourcesContent":["import {QueryType} from './constants';\nimport {interpolate} from \"./interpolate\";\nimport _ from 'lodash';\nimport {FunctionFormatter} from './function_formatter';\n\nexport class OpenNMSDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    // This variable is referenced by the calculateInterval() method in metrics_panel_ctrl.ts\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n\n    if (instanceSettings.jsonData && instanceSettings.jsonData.timeout) {\n        this.timeout = parseInt(instanceSettings.jsonData.timeout,10) * 1000;\n    }\n\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    this.searchLimit = 25;\n    this.target = {};\n  }\n\n  doOpenNMSRequest(options) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = options.headers || {};\n      options.headers.Authorization = this.basicAuth;\n    }\n\n    options.url = this.url + options.url;\n    if (this.timeout) {\n      options.timeout = this.timeout;\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  decorateError(err) {\n    let ret = err;\n    if (err.err) {\n      ret = err.err;\n    }\n    let statusText = ret.statusText || 'Request failed.';\n\n    // cancelled property causes the UI to never complete on failure\n    if (ret.cancelled) {\n      delete ret.cancelled;\n      statusText = 'Request timed out.';\n    }\n    if (err.cancelled) {\n      delete err.cancelled;\n      statusText = 'Request timed out.';\n    }\n\n    if (!ret.message) {\n      ret.message = statusText;\n    }\n    if (!ret.status) {\n      ret.status = 'error';\n    }\n    return ret;\n  }\n\n  query(options) {\n    const self = this;\n\n    // Generate the query\n    var query = this.buildQuery(options);\n\n    // Issue the request\n    var request;\n    if (query.source.length > 0) {\n      request = this.doOpenNMSRequest({\n        url: '/rest/measurements',\n        data: query,\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'}\n      });\n    } else {\n      // There are no sources listed, let Grafana display \"No data points\" to the user\n      return {'data': []};\n    }\n\n    // Convert the results to the expected format\n    return request.then((response) => {\n      if (response.status !== 200) {\n        console.warn('Successful response had status != 200:',response);\n        return self.$q.reject(response);\n      }\n      return OpenNMSDatasource.processMeasurementsResponse(response);\n    }).catch(err => {\n      return self.$q.reject(self.decorateError(err));\n    });\n  }\n\n  // Used for testing the connection from the datasource configuration page\n  testDatasource() {\n    return this.doOpenNMSRequest({\n      url: '/rest/info',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      } else {\n        return {\n          status: \"danger\",\n          message: \"OpenNMS provided a response, but no metadata was found.\",\n          title: \"Unexpected Response \" + response.status\n        };\n      }\n    }).catch(err => {\n      return this.decorateError(err);\n    });\n  }\n\n  // Used by template queries\n  metricFindQuery(query) {\n    if (query === null || query === undefined || query === \"\") {\n      return this.$q.resolve([]);\n    }\n\n    var interpolatedQuery = _.first(this.interpolateValue(query));\n\n    if (interpolatedQuery !== undefined) {\n      const functions = FunctionFormatter.findFunctions(interpolatedQuery);\n\n      for (const func of functions) {\n        if (func.name === 'nodeFilter') {\n          return this.metricFindNodeFilterQuery.apply(this, func.arguments);\n        } else if (func.name === 'nodeResources') {\n          return this.metricFindNodeResourceQuery.apply(this, func.arguments);\n        } else {\n          console.warn('Unknown function in interpolated query: ' + interpolatedQuery, func);\n        }\n      }\n    }\n\n    return this.$q.resolve([]);\n  }\n\n  metricFindNodeFilterQuery(query) {\n    return this.doOpenNMSRequest({\n      url: '/rest/nodes',\n      method: 'GET',\n      params: {\n        filterRule: query,\n        limit: 0\n      }\n    }).then(function (response) {\n      if (response.data.count > response.data.totalCount) {\n        console.warn(\"Filter matches \" + response.data.totalCount + \" records, but only \" + response.data.count + \" will be used.\");\n      }\n      var results = [];\n      _.each(response.data.node, function (node) {\n        var nodeCriteria = node.id.toString();\n        if (node.foreignId !== null && node.foreignSource !== null) {\n          nodeCriteria = node.foreignSource + \":\" + node.foreignId;\n        }\n        results.push({text: node.label, value: nodeCriteria, expandable: true});\n      });\n      return results;\n    });\n  }\n\n  metricFindNodeResourceQuery(query) {\n    return this.doOpenNMSRequest({\n      url: '/rest/resources/' + encodeURIComponent(OpenNMSDatasource.getNodeResource(query)),\n      method: 'GET',\n      params: {\n        depth: 1\n      }\n    }).then(function (response) {\n      var results = [];\n      _.each(response.data.children.resource, function (resource) {\n        var resourceWithoutNodePrefix = resource.id.match(/node(Source)?\\[.*?\\]\\.(.*)/);\n        if (resourceWithoutNodePrefix) {\n          results.push({text: resourceWithoutNodePrefix[2], expandable: true});\n        }\n      });\n      return results;\n    });\n  }\n\n  buildQuery(options) {\n    var self = this,\n      start = options.range.from.valueOf(),\n      end = options.range.to.valueOf(),\n      step = Math.floor((end - start) / options.maxDataPoints);\n      step = (step < options.intervalMs) ? options.intervalMs : step;\n\n    var query = {\n      \"start\": start,\n      \"end\": end,\n      \"step\": step,\n      \"maxrows\": options.maxDataPoints,\n      \"source\": [],\n      \"expression\": []\n    };\n\n    _.each(options.targets, function (target) {\n      var transient = \"false\";\n      if (target.hide) {\n        transient = true;\n      }\n\n      if (target.type === QueryType.Attribute) {\n        if (!((target.nodeId && target.resourceId && target.attribute))) {\n          return;\n        }\n\n        var label = target.label;\n        if (label === undefined || label === '') {\n          label = target.attribute;\n        }\n\n        // Build the source\n        var source = {\n          \"aggregation\": target.aggregation,\n          \"attribute\": target.attribute,\n          \"label\": label,\n          \"resourceId\": target.resourceId,\n          \"nodeId\": target.nodeId, // temporary attribute used for interpolation\n          \"transient\": transient\n        };\n\n        if (target.subattribute !== undefined && target.subattribute !== '') {\n          source.datasource = target.subattribute;\n        }\n        if (target.fallbackAttribute !== undefined && target.fallbackAttribute !== '') {\n          source['fallback-attribute'] = target.fallbackAttribute;\n        }\n\n        // Perform variable substitution - may generate additional queries\n        query.source = query.source.concat(self.interpolateSourceVariables(source, options.scopedVars, (interpolatedSource) => {\n          // Calculate the effective resource id after the interpolation\n          interpolatedSource.resourceId = OpenNMSDatasource.getRemoteResourceId(interpolatedSource.nodeId, interpolatedSource.resourceId);\n          delete interpolatedSource.nodeId;\n        }));\n      } else if (target.type === QueryType.Expression) {\n        if (!((target.label && target.expression))) {\n          return;\n        }\n\n        // Build the expression\n        var expression = {\n          \"label\": target.label,\n          \"value\": target.expression,\n          \"transient\": transient\n        };\n\n        // Perform variable substitution - may generate additional expressions\n        query.expression = query.expression.concat(self.interpolateExpressionVariables(expression, options.scopedVars));\n      } else if (target.type === QueryType.Filter) {\n        if (!((target.filter))) {\n          return;\n        }\n\n        // Interpolate the filter parameters\n        var interpolatedFilterParms = self.interpolateVariables(target.filterParameters, _.keys(target.filterParameters), options.scopedVars);\n\n        var filters = _.map(interpolatedFilterParms, (filterParms) => {\n          // Build the filter definition\n          var parameters = [];\n          _.each(filterParms, function (value, key) {\n            // Skip parameters with undefined or empty values\n            if (value === undefined || value === '' || value === null) {\n              return;\n            }\n\n            parameters.push({\n              'key': key,\n              'value': value\n            });\n          });\n\n          return {\n            \"name\": target.filter.name,\n            \"parameter\": parameters\n          };\n        });\n\n        // Only add the filter attribute to the query when one or more filters are specified since\n        // OpenNMS versions before 17.0.0 do not support it\n        if (!query.filter) {\n          query.filter = filters;\n        } else {\n          query.filter = query.filter.concat(filters);\n        }\n      }\n    });\n\n    return query;\n  }\n\n  interpolateSourceVariables(source, scopedVars, callback) {\n    return this.interpolateVariables(source, ['nodeId', 'resourceId', 'attribute', 'datasource', 'label'], scopedVars, callback);\n  }\n\n  interpolateExpressionVariables(expression, scopedVars) {\n    return this.interpolateVariables(expression, ['value', 'label'], scopedVars);\n  }\n\n  interpolateValue(value, scopedVars) {\n    return _.map(this.interpolateVariables({'value': value}, ['value'], scopedVars), function(entry) {\n      return entry.value;\n    });\n  }\n\n  interpolateVariables(object, attributes, scopedVars, callback) {\n    // Reformat the variables to work with our interpolate function\n    var variables = [];\n    _.each(this.templateSrv.variables, function(templateVariable) {\n      var variable = {\n        name: templateVariable.name,\n        value: []\n      };\n\n      // If this templateVar exists in scopedVars, we need to look at the scoped values\n      if (scopedVars && scopedVars[variable.name] !== undefined) {\n        variable.value.push(scopedVars[variable.name].value);\n      } else {\n        // Single-valued?\n        if (_.isString(templateVariable.current.value)) {\n          variable.value.push(templateVariable.current.value);\n        } else {\n          _.each(templateVariable.current.value, function(value) {\n            if (value === \"$__all\") {\n              _.each(templateVariable.options, function(option) {\n                // \"All\" is part of the options, so make sure to skip that one\n                if (option.value !== \"$__all\") {\n                  variable.value.push(option.value);\n                }\n              });\n            } else {\n              variable.value.push(value);\n            }\n          });\n        }\n      }\n\n      variables.push(variable);\n    });\n    return interpolate(object, attributes, variables, callback);\n  }\n\n  static processMeasurementsResponse(response) {\n    var labels = response.data.labels;\n    var columns = response.data.columns;\n    var timestamps = response.data.timestamps;\n    var metadata = response.data.metadata;\n    var series = [];\n    var i, j, nRows, nCols, datapoints;\n\n    if (timestamps !== undefined) {\n      nRows = timestamps.length;\n      nCols = columns.length;\n\n      for (i = 0; i < nCols; i++) {\n        datapoints = [];\n        for (j = 0; j < nRows; j++) {\n          // Skip rows that are out-of-ranges - this can happen with RRD data in narrow time spans\n          if (timestamps[j] < response.data.start || timestamps[j] > response.data.end) {\n            continue;\n          }\n\n          datapoints.push([columns[i].values[j], timestamps[j]]);\n        }\n\n        let label = labels[i];\n        if (metadata && metadata.resources) {\n          label = FunctionFormatter.format(label, metadata);\n        }\n\n        series.push({\n          target: label,\n          datapoints: datapoints\n        });\n      }\n    }\n\n    return {data: series};\n  }\n\n  static flattenResourcesWithAttributes(resources, resourcesWithAttributes) {\n    _.each(resources, function (resource) {\n      if (resource.rrdGraphAttributes !== undefined && Object.keys(resource.rrdGraphAttributes).length > 0) {\n        resourcesWithAttributes.push(resource);\n      }\n      if (resource.children !== undefined && resource.children.resource.length > 0) {\n        OpenNMSDatasource.flattenResourcesWithAttributes(resource.children.resource, resourcesWithAttributes);\n      }\n    });\n    return resourcesWithAttributes;\n  }\n\n  static getNodeResource(nodeId) {\n    var prefix = \"\";\n    if (nodeId.indexOf(\":\") > 0) {\n      prefix = \"nodeSource[\";\n    } else {\n      prefix = \"node[\";\n    }\n    return prefix + nodeId + \"]\";\n  }\n\n  static getRemoteResourceId(nodeId, resourceId) {\n    return OpenNMSDatasource.getNodeResource(nodeId) + \".\" + resourceId;\n  }\n\n  searchForNodes(query) {\n    return this.doOpenNMSRequest({\n      url: '/rest/nodes',\n      method: 'GET',\n      params: {\n        limit: this.searchLimit,\n        match: 'any',\n        comparator: 'ilike',\n        orderBy: 'id',\n        order: 'asc',\n        label: '%' + query + '%',\n        sysName: '%' + query + '%',\n        'ipInterface.ipAddress': '%' + query + '%',\n        'ipInterface.ipHostName': '%' + query + '%',\n        'foreignId': query + '%' // doesn't support leading '%'\n      }\n    });\n  }\n\n  getResourcesWithAttributesForNode(nodeId) {\n    var interpolatedNodeId = _.first(this.interpolateValue(nodeId));\n\n    return this.doOpenNMSRequest({\n      url: '/rest/resources/fornode/' + encodeURIComponent(interpolatedNodeId),\n      method: 'GET',\n      params: {\n        depth: -1\n      }\n    }).then(function (results) {\n      return OpenNMSDatasource.flattenResourcesWithAttributes([results.data], []);\n    });\n  }\n\n  getAvailableFilters() {\n    return this.doOpenNMSRequest({\n      url: '/rest/measurements/filters',\n      method: 'GET'\n    });\n  }\n\n  suggestAttributes(nodeId, resourceId, query) {\n    var interpolatedNodeId = _.first(this.interpolateValue(nodeId)),\n        interpolatedResourceId = _.first(this.interpolateValue(resourceId));\n    var remoteResourceId = OpenNMSDatasource.getRemoteResourceId(interpolatedNodeId, interpolatedResourceId);\n\n    return this.doOpenNMSRequest({\n      url: '/rest/resources/' + encodeURIComponent(remoteResourceId),\n      method: 'GET',\n      params: {\n        depth: -1\n      }\n    }).then(function (results) {\n      query = query.toLowerCase();\n      var attributes = [];\n      _.each(results.data.rrdGraphAttributes, function (value, key) {\n        if (key.toLowerCase().indexOf(query) >= 0) {\n          attributes.push(key);\n        }\n      });\n      attributes.sort();\n\n      return attributes;\n    });\n  }\n}\n"]}
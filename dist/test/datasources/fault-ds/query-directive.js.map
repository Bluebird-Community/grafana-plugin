{"version":3,"sources":["../../../../src/datasources/fault-ds/query-directive.js"],"names":["module","directive","templateUrl","controller","restrict","controllerAs","scope","query","datasource","queryCtrl","$scope","uiSegmentSrv","$q","QueryCtrl","updateControls","findOperators","attribute","metricFindQuery","then","comparators","filter","comparator","aliases","length","map","uiComparator","getUiComparator","newOperator","catch","handleQueryError","bind","getSuggestions","clause","segment","index","segments","restriction","type","find","strategy","featuredAttributes","properties","property","newKey","id","attributeSegment","value","theQuery","Restriction","VALUE_PLACEHOLDER","values","searchResult","newKeyValue","label","operators","operator","newCondition","when","segmentUpdated","segmentIndex","fake","asRestrictionDTO","getAttribute","getComparator","console","log","setComparator","updateTargetFilter","performClick","control","action","findParent"],"mappings":"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","file":"query-directive.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport {ComparatorMapping} from \"./mapping/ComparatorMapping\";\nimport {UI} from \"./UI\";\n\nangular.module('grafana.directives')\n    .directive('onmsQuery', function() {\n        return {\n            templateUrl: 'public/plugins/opennms-helm-app/datasources/fault-ds/partials/query.html',\n            controller: 'QueryController',\n            restrict: 'EA',\n            controllerAs: 'ctrl',\n            scope: {\n                query: \"=\", // The ui query object\n                datasource: \"=\", // The datasource\n                queryCtrl: \"=\", // The QueryCtrl object\n            }\n        };\n    })\n    .controller('QueryController', function ($scope, uiSegmentSrv, $q) {\n        const datasource = $scope.datasource;\n        const QueryCtrl = $scope.queryCtrl;\n        $scope.query.updateControls();\n\n        $scope.findOperators = function(attribute) {\n            return datasource.metricFindQuery({'find': 'comparators', 'attribute': attribute})\n                .then(function(comparators) {\n                    // the API.Comparator.id or API.Comparator.label fields cannot be used.\n                    comparators = _.filter(comparators, function(comparator) {\n                        return comparator.aliases && comparator.aliases.length > 0;\n                    });\n                    return _.map(comparators, function(comparator) {\n                        const uiComparator = new ComparatorMapping().getUiComparator(comparator);\n                        return uiSegmentSrv.newOperator(uiComparator);\n                    });\n                }).catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n        };\n\n        $scope.getSuggestions = function(clause, segment, index) {\n            var segments = clause.restriction.segments;\n\n            // attribute input\n            if (segment.type == 'key' || segment.type == 'plus-button') {\n                return datasource.metricFindQuery({find: \"attributes\", strategy: QueryCtrl.featuredAttributes === true ? 'featured' : 'all'})\n                    .then(function(properties) {\n                        let segments = _.map(properties, function(property) {\n                            var segment = uiSegmentSrv.newKey(property.id);\n                            return segment;\n                        });\n                        return segments;\n                    })\n                    .catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // comparator input\n            if (segment.type == 'operator') {\n                let attributeSegment = segments[index-1];\n                return $scope.findOperators(attributeSegment.value);\n            }\n\n            // value input\n            if (segment.type == 'value') {\n                let attributeSegment = segments[index-2];\n                let theQuery = {\n                    'find': 'values',\n                    'attribute': attributeSegment.value,\n                    'query': segment.value === UI.Restriction.VALUE_PLACEHOLDER ? '' : segment.value\n                };\n\n                return datasource.metricFindQuery(theQuery)\n                    .then(function(values) {\n                        return _.map(values, function(searchResult) {\n                            var segment = uiSegmentSrv.newKeyValue(searchResult.label);\n                            return segment;\n                        })\n                    })\n                    .catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n\n            // condition input\n            if (segment.type === 'condition') {\n                return this.datasource.metricFindQuery({find: 'operators'}).then(function(operators) {\n                    return _.map(operators, function(operator) {\n                        return uiSegmentSrv.newCondition(operator.label);\n                    });\n                }).catch(QueryCtrl.handleQueryError.bind(QueryCtrl));\n            }\n            return $q.when([]);\n        };\n\n        $scope.segmentUpdated = function(clause, segment, segmentIndex) {\n            // Make the value not a fake input anymore\n            if (segment.type === 'value') {\n                segment.fake = false;\n            }\n\n            // It must be verified that the comparator is still in the list of comparators.\n            // If not, the first comparator in the list is fallen back to.\n            // The check is only necessary if a restriction is already fully defined.\n            if (segmentIndex == 0 && clause.restriction.asRestrictionDTO()) {\n                const attribute = clause.restriction.getAttribute();\n                $scope.findOperators(attribute).then(segments => {\n                    const comparators = _.map(segments, segment => {\n                        return segment.value;\n                    });\n                    const comparator = comparators.find(comparator => {\n                        return comparator === clause.restriction.getComparator();\n                    });\n                    // In case no comparator was found, fall back to the 1st one in the list\n                    if (comparators.length >= 1 && (!comparator || comparator === void 0)) {\n                        console.log(\"Comparator \" + clause.restriction.getComparator() + \" is selected but not supported. Falling back to \" + comparators[0]);\n                        clause.restriction.setComparator(comparators[0]);\n                    }\n                }).then(() => {\n                    $scope.query.updateControls();\n                    QueryCtrl.updateTargetFilter();\n                });\n            } else { // Default behaviour\n                $scope.query.updateControls();\n                QueryCtrl.updateTargetFilter();\n            }\n        };\n\n        $scope.performClick = function(clause, control) {\n            if (control.action) {\n                control.action($scope.query, clause);\n                QueryCtrl.updateTargetFilter();\n                $scope.query.findParent().updateControls();\n            }\n        };\n    });\n"]}
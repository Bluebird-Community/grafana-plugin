{"version":3,"sources":["../../../../../src/datasources/fault-ds/ui/Query.js"],"names":["Query","uiSegmentSrv","parentQuery","clauses","root","getSize","length","createNewEmptyClause","self","each","clause","updateControls","index","undefined","splice","push","indexOf","isEmpty","map","string","restriction","subString","asString","restrictionString","message","operator","value","toLowerCase","join","newClause","Clause","Operators","AND","Restriction","addSegment","newKey","KEY_PLACEHOLDER","newOperator","newFake","VALUE_PLACEHOLDER","addClause","newQuery","findParent"],"mappings":"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","file":"Query.js","sourcesContent":["import _ from 'lodash';\nimport {UI} from '../UI';\n\nexport class Query {\n\n    constructor(uiSegmentSrv, parentQuery) {\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.clauses = [];\n        this.root = false;\n        this.parentQuery = parentQuery;\n    }\n\n    clear() {\n        this.clauses = [];\n    }\n\n    isEmpty() {\n        return this.getSize() == 0;\n    }\n\n    getSize() {\n        return this.clauses.length;\n    }\n\n    getLastClause() {\n        if (this.clauses.length == 0) {\n            return null;\n        }\n        return this.clauses[this.getSize() - 1];\n    }\n\n    updateControls() {\n        // at least one row should be available even if it is a dummy row\n        if (this.getSize() == 0) {\n            this.createNewEmptyClause();\n        }\n        var self = this;\n        _.each(this.clauses, clause => {\n            clause.updateControls(self);\n        });\n    }\n\n    addClause(clause, index) {\n        if (clause) {\n            if (!clause.uiSegmentSrv) {\n                clause.uiSegmentSrv = this.uiSegmentSrv;\n            }\n            if (index !== undefined) {\n                this.clauses.splice(index, 0, clause);\n            } else {\n                this.clauses.push(clause);\n            }\n        }\n    }\n\n    removeClause(clause) {\n        if (clause) {\n            var index = this.clauses.indexOf(clause);\n            if (index >= 0) {\n                this.clauses.splice(index, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    asString() {\n        if (this.isEmpty()) {\n            return \"\";\n        }\n        return _.map(this.clauses, function(clause, index) {\n            let string = '';\n            if (clause.restriction instanceof UI.Query) {\n                const subString = clause.restriction.asString();\n                if (subString && subString.length > 0) {\n                    string += \"(\" + subString + \")\";\n                }\n            } else if (clause.restriction) {\n                const restrictionString = clause.restriction.asString();\n                if (restrictionString && restrictionString.length > 0) {\n                    string += restrictionString;\n                }\n            } else {\n                throw {message: \"Clause does not contain restriction. Bailing\", clause: clause};\n            }\n\n            // Append operator if we have anything generated\n            if (string.length > 0  && index > 0 && clause.operator && clause.operator.value) {\n                string = \" \" + clause.operator.value.toLowerCase() + \" \" + string;\n            }\n            return string;\n        }).join(\"\");\n    }\n\n    createNewEmptyClause(index) {\n        const newClause = new UI.Clause(this.uiSegmentSrv, UI.Operators.AND, new UI.Restriction(this.uiSegmentSrv));\n        newClause.restriction.addSegment(this.uiSegmentSrv.newKey(UI.Restriction.KEY_PLACEHOLDER));\n        newClause.restriction.addSegment(this.uiSegmentSrv.newOperator('='));\n        newClause.restriction.addSegment(this.uiSegmentSrv.newFake(UI.Restriction.VALUE_PLACEHOLDER, 'value', 'query-segment-value'));\n        this.addClause(newClause, index);\n        return newClause;\n    }\n\n    createNewEmptyNestedClause(index) {\n        const newQuery = new UI.Query(this.uiSegmentSrv, this);\n        newQuery.createNewEmptyClause();\n        const newClause = new UI.Clause(this.uiSegmentSrv, UI.Operators.AND, newQuery);\n        this.addClause(newClause, index);\n        return newQuery;\n    }\n\n    findParent() {\n        if (this.parentQuery) {\n            return this.parentQuery.findParent();\n        }\n        return this;\n    }\n}\n"]}
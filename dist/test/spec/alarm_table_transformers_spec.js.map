{"version":3,"sources":["../../../src/spec/alarm_table_transformers_spec.js"],"names":["describe","transformer","beforeEach","it","expect","getColumns","to","have","length","table","columns","eql","t1","t2","push","row","rows","panel","model","transform","actualRow","metadata","meta","expectedRow","undefined","alarm_from_ds1_as_row","source","alarm","id","alarm_from_ds2_as_row"],"mappings":"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","file":"alarm_table_transformers_spec.js","sourcesContent":["import {transformers} from '../panels/alarm-table/transformers';\nimport {TableModel} from '../panels/alarm-table/table_model';\n\ndescribe('Table transformer', function() {\n  let transformer;\n\n  beforeEach(function() {\n    transformer = transformers['table'];\n  });\n\n  describe('Listing the columns', function() {\n    it('should return an empty list of columns when no data is present', function() {\n      expect(transformer.getColumns([])).to.have.length(0);\n    });\n\n    it('should return an empty list of columns when the given table has no columns', function() {\n      let table = new TableModel();\n      expect(transformer.getColumns([table])).to.have.length(0);\n    });\n\n    it('should return the list of columns when a table has columns', function() {\n      let table = new TableModel();\n      table.columns = ['col1', 'col2', 'col3'];\n      expect(transformer.getColumns([table])).to.eql(['col1', 'col2', 'col3']);\n    });\n\n    it('should return the intersection of all columns names when given multiple tables', function() {\n      let t1 = new TableModel();\n      t1.columns = ['col1', 'col2', 'col3'];\n      let t2 = new TableModel();\n      t2.columns = ['col1', 'col2', 'colx'];\n      expect(transformer.getColumns([t1,t2])).to.eql(['col1', 'col2']);\n    });\n  });\n\n  describe('Transforming the data', function() {\n    it('should return all columns if none are specified in the panel definition', function() {\n      let table = new TableModel();\n      table.columns.push(\"A\");\n\n      let row = [1];\n      table.rows.push(row);\n\n      let panel = {};\n      let model = new TableModel();\n\n      transformer.transform([table], panel, model);\n      expect(model.columns).to.eql(table.columns);\n      expect(model.rows).to.eql(table.rows);\n    });\n\n    it('should filter the columns if one or more are specified in the panel definition', function() {\n      let table = new TableModel();\n      table.columns.push('A', 'B', 'C');\n\n      let actualRow = [1,2,3];\n      let metadata = {\n        'alarm': 'abc'\n      };\n      actualRow.meta = metadata;\n      table.rows.push(actualRow);\n\n      let panel = {columns: [{\n        'text': 'B'\n      }]};\n      let model = new TableModel();\n\n      transformer.transform([table], panel, model);\n\n      // The meta-data that was on the original row should also be present on the\n      // transformed row\n      let expectedRow = [2];\n      expectedRow.meta = metadata;\n\n      expect(model.columns).to.eql(panel.columns);\n      expect(model.rows).to.eql([expectedRow]);\n    });\n\n    it('should re-order the columns according the order specified in the panel definition', function() {\n      let table = new TableModel();\n      table.columns.push('A', 'B', 'C');\n      table.rows.push([1,2,3]);\n\n      let panel = {columns: [{\n        'text': 'C'\n      }, {\n        'text': 'B'\n      }]};\n      let model = new TableModel();\n\n      transformer.transform([table], panel, model);\n\n      expect(model.columns).to.eql(panel.columns);\n      expect(model.rows).to.eql([[3, 2]]);\n    });\n\n    it('should use an undefined value when a column is present in the panel definition, but not in any of the tables', function() {\n      let table = new TableModel();\n      table.columns.push('A', 'B', 'C');\n      table.rows.push([1,2,3]);\n\n      let panel = {columns: [{\n        'text': 'C'\n      }, {\n        'text': 'Z'\n      }, {\n        'text': 'B'\n      }]};\n      let model = new TableModel();\n\n      transformer.transform([table], panel, model);\n\n      expect(model.columns).to.eql(panel.columns);\n      expect(model.rows).to.eql([[3, undefined, 2]]);\n    });\n\n    it('should combine multiple tables into a single table', function() {\n      let t1 = new TableModel();\n      t1.columns.push(\"A\");\n      t1.rows.push([1]);\n\n      let t2 = new TableModel();\n      t2.columns.push(\"A\");\n      t2.rows.push([2]);\n\n      let panel = {};\n      let model = new TableModel();\n\n      transformer.transform([t1,t2], panel, model);\n      expect(model.columns).to.eql(t1.columns);\n      expect(model.rows).to.eql([[1], [2]]);\n    });\n\n    it('should deduplicate alarms originating from the same datasource', function() {\n      let alarm_from_ds1_as_row = [1];\n      alarm_from_ds1_as_row.meta = {\n        source: 'ds1',\n        alarm: {\n          id: 1\n        }\n      };\n\n      let alarm_from_ds2_as_row = [2];\n      alarm_from_ds2_as_row.meta = {\n        source: 'ds2',\n        alarm: {\n          id: 1\n        }\n      };\n\n      let t1 = new TableModel();\n      t1.columns.push(\"ID\");\n      t1.rows.push(alarm_from_ds1_as_row);\n\n      let t2 = new TableModel();\n      t2.columns.push(\"ID\");\n      t2.rows.push(alarm_from_ds1_as_row);\n      t2.rows.push(alarm_from_ds2_as_row);\n\n      let panel = {};\n      let model = new TableModel();\n\n      transformer.transform([t1,t2], panel, model);\n      expect(model.columns).to.eql(t1.columns);\n      // alarm_from_ds1_as_row should only appear once\n      expect(model.rows).to.eql([alarm_from_ds1_as_row, alarm_from_ds2_as_row]);\n    });\n  });\n\n});"]}
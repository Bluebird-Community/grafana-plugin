{"version":3,"sources":["../../../src/spec/perf_ds_interpolate_spec.js"],"names":["describe","query","it","expect","to","deep","equal","name","value","interpolated","queryWithIndex","queryWithMultipleVariables"],"mappings":"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","file":"perf_ds_interpolate_spec.js","sourcesContent":["import {interpolate} from \"../datasources/perf-ds/interpolate\";\n\ndescribe('OpenNMSPMDatasource :: interpolate', function () {\n  let query = {'resource': '$node', 'metric': '$x.$y'};\n\n  it('should return the same object when the list of attributes is empty', function () {\n    expect(interpolate(query, [], [])).to.deep.equal([query]);\n  });\n\n  it('should return the same object when the list of variables is empty', function () {\n    expect(interpolate(query, ['resource'], [])).to.deep.equal([query]);\n  });\n\n  it('should return the same object when no matching variables are referenced', function () {\n    expect(interpolate(query, ['resource'], [{name: '!node', value: ['1']}])).to.deep.equal([query]);\n  });\n\n  it('should be able to interpolate a single variable in a single attribute', function () {\n    let interpolated = interpolate(query, ['resource'], [{name: 'node', value: ['1', '2']}]);\n    expect(interpolated).to.deep.equal([\n      {'resource': '1', 'metric': '$x.$y'},\n      {'resource': '2', 'metric': '$x.$y'}\n    ]);\n  });\n\n  it('should be able to interpolate multiple variables in a single attribute', function () {\n    let interpolated = interpolate(query, ['metric'], [\n      {name: 'x', value: ['x1', 'x2']},\n      {name: 'y', value: ['y1', 'y2']}\n    ]);\n    expect(interpolated).to.deep.equal([\n      {'resource': '$node', 'metric': 'x1.y1'},\n      {'resource': '$node', 'metric': 'x1.y2'},\n      {'resource': '$node', 'metric': 'x2.y1'},\n      {'resource': '$node', 'metric': 'x2.y2'}\n    ]);\n  });\n\n  it('should be able to interpolate multiple variables in multiple attributes', function () {\n    let interpolated = interpolate(query, ['resource', 'metric'], [\n      {name: 'node', value: ['1', '2']},\n      {name: 'x', value: ['x1', 'x2']},\n      {name: 'y', value: ['y1', 'y2']}\n    ]);\n    expect(interpolated).to.deep.equal([\n      {'resource': '1', 'metric': 'x1.y1'},\n      {'resource': '1', 'metric': 'x1.y2'},\n      {'resource': '1', 'metric': 'x2.y1'},\n      {'resource': '1', 'metric': 'x2.y2'},\n      {'resource': '2', 'metric': 'x1.y1'},\n      {'resource': '2', 'metric': 'x1.y2'},\n      {'resource': '2', 'metric': 'x2.y1'},\n      {'resource': '2', 'metric': 'x2.y2'}\n    ]);\n  });\n\n  it('should support interpolating a special variable named $index which is unique for every row', function () {\n    let queryWithIndex = {'resource': 'node', 'metric': '$x.$y', 'label': '$index'};\n\n    let interpolated = interpolate(queryWithIndex, ['resource', 'metric', 'label'], [\n      {name: 'x', value: ['x1', 'x2']},\n      {name: 'y', value: ['y1', 'y2']}\n    ]);\n\n    expect(interpolated).to.deep.equal([\n      {'resource': 'node', 'metric': 'x1.y1', 'label': 'idx0'},\n      {'resource': 'node', 'metric': 'x1.y2', 'label': 'idx1'},\n      {'resource': 'node', 'metric': 'x2.y1', 'label': 'idx2'},\n      {'resource': 'node', 'metric': 'x2.y2', 'label': 'idx3'}\n    ]);\n  });\n\n  it('should be able to interpolate multiple variables with the same name in a single attribute', function () {\n    let queryWithMultipleVariables = {'resource': '$node', 'metric': '$x-var + $x-var'};\n    let interpolated = interpolate(queryWithMultipleVariables, ['resource', 'metric'], [\n      {name: 'x-var', value: ['x1', 'x2']},\n    ]);\n    expect(interpolated).to.deep.equal([\n      {'resource': '$node', 'metric': 'x1 + x1'},\n      {'resource': '$node', 'metric': 'x2 + x2'}\n    ]);\n  });\n});\n"]}
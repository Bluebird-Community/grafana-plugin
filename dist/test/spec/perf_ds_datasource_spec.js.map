{"version":3,"sources":["../../../src/spec/perf_ds_datasource_spec.js"],"names":["describe","ctx","beforeEach","$q","backendSrv","templateSrv","replace","val","containsVariable","ds","url","query","range","from","to","targets","type","nodeId","resourceId","attribute","aggregation","interval","response","it","done","datasourceRequest","request","when","_request","status","data","then","result","expect","have","length","target","equal","datapoints","testDatasource","variables","name","current","value","options","buildQuery","source","scopedVars","label","filter","filterParameters","param1","param2","parameter","key"],"mappings":"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","file":"perf_ds_datasource_spec.js","sourcesContent":["import {Datasource} from \"../datasources/perf-ds/module\";\nimport Q from \"q\";\n\ndescribe('OpenNMSPMDatasource', function () {\n  let ctx = {};\n\n  beforeEach(function () {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.templateSrv = {replace: val => val, containsVariable: () => true};\n    ctx.ds = new Datasource({url: ''}, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  describe('querying with one target', function () {\n    let query = {\n      range: {from: 'now-1h', to: 'now'},\n      targets: [{\n        type: \"attribute\",\n        nodeId: '1',\n        resourceId: 'nodeSnmp[]',\n        attribute: 'loadavg1',\n        aggregation: 'AVERAGE'\n      }],\n      interval: '1s'\n    };\n\n    let response = {\n      \"step\": 300000,\n      \"start\": 1424211730000,\n      \"end\": 1424226130000,\n      \"timestamps\": [1424211730001],\n      \"labels\": [\"loadavg1\"],\n      \"columns\": [\n        {\n          \"values\": [5.0]\n        }\n      ]\n    };\n\n    it('should return a list of series', function (done) {\n      ctx.backendSrv.datasourceRequest = function (request) {\n        return ctx.$q.when({\n          _request: request,\n          status: 200,\n          data: response\n        });\n      };\n\n      ctx.ds.query(query).then(function (result) {\n        expect(result.data).to.have.length(1);\n        expect(result.data[0].target).to.equal('loadavg1');\n        expect(result.data[0].datapoints).to.have.length(1);\n        done();\n      });\n    });\n  });\n\n  describe('testing for connectivity', function () {\n    it('should make a request to /rest/info', function (done) {\n      ctx.backendSrv.datasourceRequest = function (request) {\n        expect(request.url).to.equal('/rest/info');\n        return ctx.$q.when({\n          status: 200\n        });\n      };\n\n      ctx.ds.testDatasource().then(function () {\n        done();\n      });\n    });\n  });\n\n  describe('using templates', function () {\n    it('should perform simple variable substitution', function () {\n      ctx.templateSrv.variables = [\n        {name: 'variable', current: {value: 'loadavg1'}}\n      ];\n\n      let options = {\n        range: {from: 'now-1h', to: 'now'},\n        targets: [{\n          type: \"attribute\",\n          nodeId: '1',\n          resourceId: 'nodeSnmp[]',\n          attribute: '$variable',\n          aggregation: 'AVERAGE'\n        }],\n        interval: '1s'\n      };\n      let query = ctx.ds.buildQuery(options);\n\n      expect(query.source.length).to.equal(1);\n      expect(query.source[0].attribute).to.equal(\"loadavg1\");\n    });\n\n    it('should support scoped variables', function () {\n      ctx.templateSrv.variables = [\n        {name: 'variable', current: {value: 'loadavg1'}}\n      ];\n\n      let options = {\n        range: {from: 'now-1h', to: 'now'},\n        targets: [{\n          type: \"attribute\",\n          nodeId: '1',\n          resourceId: 'nodeSnmp[]',\n          attribute: '$variable',\n          aggregation: 'AVERAGE'\n        }],\n        interval: '1s',\n        scopedVars: {\n          'variable': {\n            value: 'loadavg5'\n          }\n        }\n      };\n      let query = ctx.ds.buildQuery(options);\n\n      expect(query.source.length).to.equal(1);\n      expect(query.source[0].attribute).to.equal(\"loadavg5\");\n    });\n\n    it('should use node[] or nodeSource[] based on the contents of the variable', function () {\n      ctx.templateSrv.variables = [\n        {name: 'node', current: {value: ['1', 'FS:FID']}}\n      ];\n\n      let options = {\n        range: {from: 'now-1h', to: 'now'},\n        targets: [{\n          type: \"attribute\",\n          nodeId: '$node',\n          resourceId: 'nodeSnmp[]',\n          attribute: 'CpuRawIdle',\n          aggregation: 'AVERAGE',\n          label: 'idle on $node'\n        }],\n        interval: '1s'\n      };\n      let query = ctx.ds.buildQuery(options);\n\n      expect(query.source.length).to.equal(2);\n      expect(query.source[0].resourceId).to.equal(\"node[1].nodeSnmp[]\");\n      expect(query.source[1].resourceId).to.equal(\"nodeSource[FS:FID].nodeSnmp[]\");\n    });\n\n    it('should generate multiple sources for multi-valued template variables', function () {\n      ctx.templateSrv.variables = [\n        {name: 'v1', current: {value: ['1', '2']}},\n        {name: 'v2', current: {value: ['x', 'y']}}\n      ];\n\n      let options = {\n        range: {from: 'now-1h', to: 'now'},\n        targets: [{\n          type: \"attribute\",\n          nodeId: '1',\n          resourceId: 'nodeSnmp[]',\n          attribute: '$v1-$v2',\n          aggregation: 'AVERAGE'\n        }],\n        interval: '1s'\n      };\n      let query = ctx.ds.buildQuery(options);\n\n      expect(query.source.length).to.equal(4);\n      expect(query.source[0].attribute).to.equal(\"1-x\");\n      expect(query.source[1].attribute).to.equal(\"1-y\");\n      expect(query.source[2].attribute).to.equal(\"2-x\");\n      expect(query.source[3].attribute).to.equal(\"2-y\");\n    });\n\n    it('should handle substituting \"All\" with all of the available values', function () {\n      ctx.templateSrv.variables = [\n        {\n          name: 'x',\n          current: {value: ['$__all']},\n          options: [\n            {value: '$__all'},\n            {value: 'a'},\n            {value: 'b'},\n            {value: 'c'},\n            {value: 'd'}\n          ]\n        }\n      ];\n\n      let options = {\n        range: {from: 'now-1h', to: 'now'},\n        targets: [{\n          type: \"attribute\",\n          nodeId: '1',\n          resourceId: 'nodeSnmp[]',\n          attribute: '$x',\n          aggregation: 'AVERAGE'\n        }],\n        interval: '1s'\n      };\n      let query = ctx.ds.buildQuery(options);\n\n      expect(query.source.length).to.equal(4);\n      expect(query.source[0].attribute).to.equal(\"a\");\n      expect(query.source[1].attribute).to.equal(\"b\");\n      expect(query.source[2].attribute).to.equal(\"c\");\n      expect(query.source[3].attribute).to.equal(\"d\");\n    });\n\n    it('should perform variable substitution on all filter parameters', function () {\n      ctx.templateSrv.variables = [\n        {name: 'variable', current: {value: ['x', 'y']}}\n      ];\n\n      let options = {\n        range: {from: 'now-1h', to: 'now'},\n        targets: [\n          {\n            type: \"attribute\",\n            nodeId: '1',\n            resourceId: 'nodeSnmp[]',\n            attribute: '$variable',\n            aggregation: 'AVERAGE'\n          },\n          {\n            type: \"filter\",\n            filter: {\n              name: \"some-filter\"\n            },\n            filterParameters: {\n              param1: 1,\n              param2: '$variable'\n            }\n          }\n        ],\n        interval: '1s'\n      };\n      let query = ctx.ds.buildQuery(options);\n\n      expect(query.filter.length).to.equal(2);\n      expect(query.filter[0].name).to.equal(\"some-filter\");\n      expect(query.filter[0].parameter.length).to.equal(2);\n      expect(query.filter[0].parameter[0].key).to.equal(\"param1\");\n      expect(query.filter[0].parameter[0].value).to.equal(1);\n      expect(query.filter[0].parameter[1].key).to.equal(\"param2\");\n      expect(query.filter[0].parameter[1].value).to.equal(\"x\");\n\n      expect(query.filter[1].name).to.equal(\"some-filter\");\n      expect(query.filter[1].parameter.length).to.equal(2);\n      expect(query.filter[1].parameter[0].key).to.equal(\"param1\");\n      expect(query.filter[1].parameter[0].value).to.equal(1);\n      expect(query.filter[1].parameter[1].key).to.equal(\"param2\");\n      expect(query.filter[1].parameter[1].value).to.equal(\"y\");\n    });\n  });\n});\n"]}
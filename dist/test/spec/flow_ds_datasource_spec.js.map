{"version":3,"sources":["../../../src/spec/flow_ds_datasource_spec.js"],"names":["describe","flowSeriesExample","it","done","actualResponse","toSeries","expectedResponse","expect","to","eql","target"],"mappings":";;AAAA;;AAEAA,SAAS,yBAAT,EAAoC,YAAY;;AAE9C,MAAIC,oBAAoB;AACtB,aAAS,aADa;AAEtB,WAAO,aAFe;AAGtB,eAAW,CACT;AACE,eAAS,QADX;AAEE,iBAAW;AAFb,KADS,EAKT;AACE,eAAS,QADX;AAEE,iBAAW;AAFb,KALS,CAHW;AAatB,kBAAc,CACZ,aADY,CAbQ;AAgBtB,cAAU,CACR,CACE,CADF,CADQ,EAIR,CACE,CADF,CAJQ;AAhBY,GAAxB;;AA0BAD,WAAS,SAAT,EAAoB,YAAY;AAC9BE,OAAG,8CAAH,EAAmD,UAAUC,IAAV,EAAgB;AACjE,UAAIC,iBAAiB,2BAAeC,QAAf,CAAwB,EAAxB,EAA4BJ,iBAA5B,CAArB;AACA,UAAIK,mBAAmB,CACrB;AACE,sBAAc,CACZ,CACE,CADF,EAEE,aAFF,CADY,CADhB;AAOE,kBAAU;AAPZ,OADqB,EAUrB;AACE,sBAAc,CACZ,CACE,CADF,EAEE,aAFF,CADY,CADhB;AAOE,kBAAU;AAPZ,OAVqB,CAAvB;;AAqBAC,aAAOD,gBAAP,EAAyBE,EAAzB,CAA4BC,GAA5B,CAAgCL,cAAhC;AACAD;AACD,KAzBD;;AA4BAD,OAAG,4CAAH,EAAiD,UAAUC,IAAV,EAAgB;AAC/D,UAAIO,SAAS;AACX,qBAAa,CACX;AACE,kBAAQ;AADV,SADW;AADF,OAAb;AAOA,UAAIN,iBAAiB,2BAAeC,QAAf,CAAwBK,MAAxB,EAAgCT,iBAAhC,CAArB;AACA,UAAIK,mBAAmB,CACrB;AACE,sBAAc,CACZ,CACE,CADF,EAEE,aAFF,CADY,CADhB;AAOE,kBAAU;AAPZ,OADqB,CAAvB;;AAYAC,aAAOD,gBAAP,EAAyBE,EAAzB,CAA4BC,GAA5B,CAAgCL,cAAhC;AACAD;AACD,KAvBD;AAwBD,GArDD;AAuDD,CAnFD","file":"flow_ds_datasource_spec.js","sourcesContent":["import {FlowDatasource} from '../datasources/flow-ds/datasource';\n\ndescribe(\"OpenNMS_Flow_Datasource\", function () {\n\n  let flowSeriesExample = {\n    \"start\": 1516358909932,\n    \"end\": 1516373309932,\n    \"columns\": [\n      {\n        \"label\": \"domain\",\n        \"ingress\": true\n      },\n      {\n        \"label\": \"domain\",\n        \"ingress\": false\n      }\n    ],\n    \"timestamps\": [\n      1516358909932\n    ],\n    \"values\": [\n      [\n        1\n      ],\n      [\n        2\n      ]\n    ]\n  };\n\n  describe('Mapping', function () {\n    it(\"should map series response to Grafana series\", function (done) {\n      let actualResponse = FlowDatasource.toSeries({}, flowSeriesExample);\n      let expectedResponse = [\n        {\n          \"datapoints\": [\n            [\n              1,\n              1516358909932\n            ]\n          ],\n          \"target\": \"domain (In)\"\n        },\n        {\n          \"datapoints\": [\n            [\n              2,\n              1516358909932\n            ]\n          ],\n          \"target\": \"domain (Out)\"\n        }\n      ];\n\n      expect(expectedResponse).to.eql(actualResponse);\n      done();\n    });\n\n\n    it(\"should combine ingress and egress when set\", function (done) {\n      let target = {\n        'functions': [\n          {\n            'name': 'combineIngressEgress'\n          }\n        ]\n      };\n      let actualResponse = FlowDatasource.toSeries(target, flowSeriesExample);\n      let expectedResponse = [\n        {\n          \"datapoints\": [\n            [\n              3,\n              1516358909932\n            ]\n          ],\n          \"target\": \"domain\"\n        }\n      ];\n\n      expect(expectedResponse).to.eql(actualResponse);\n      done();\n    });\n  });\n\n});\n"]}
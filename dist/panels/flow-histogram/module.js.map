{"version":3,"file":"panels/flow-histogram/module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"moment\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./panels/flow-histogram/FlowHistogramHelpers.ts","webpack:///./panels/flow-histogram/FlowHistogramConstants.ts","webpack:///./components/OnmsInlineField.tsx","webpack:///./components/SwitchBox.tsx","webpack:///./panels/flow-histogram/FlowHistogramOptions.tsx","webpack:///./panels/flow-histogram/module.ts","webpack:///./panels/flow-histogram/FlowHistogramControl.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__3305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8283__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable no-restricted-imports */\nimport { CSSProperties } from 'react'\nimport { DataFrame } from '@grafana/data'\nimport moment from 'moment'\nimport { FlowHistogramOptionsProps, FlowPanelDataProcessed, FlowPanelUnitInfo } from './FlowHistogramTypes'\nimport { DataPosition, FlowDataDirection, UnitInfo } from './FlowHistogramConstants'\n\nexport const getFlowHistogramPlotData = (processedData: FlowPanelDataProcessed, options: { flowHistogramOptions: FlowHistogramOptionsProps }): any[] => {\n\n    switch (options.flowHistogramOptions.mode.label) {\n        case 'Separate': {\n            let inSeriesData: any = {\n                label: 'In',\n                bars: {\n                    show: true,\n                    barWidth: 0.2,\n                    align: options.flowHistogramOptions.direction.label === 'Horizontal' ? 'left' : 'right'\n                },\n                data: processedData.separateData?.inByLabel\n            }\n\n            let outSeriesData: any = {\n                label: 'Out',\n                bars: {\n                    show: true,\n                    barWidth: 0.2,\n                    align: options.flowHistogramOptions.direction.label === 'Horizontal' ? 'right' : 'left'\n                },\n                data: processedData.separateData?.outByLabel,\n            }\n\n            return [outSeriesData, inSeriesData]\n        }\n        case 'Stacked': {\n            return processedData.stackedData?.metricsByLabel ? processedData.stackedData.metricsByLabel : []\n        }\n        default: return []\n    }\n}\n\nexport const getFlowHistogramPlotConfig = (processedData: FlowPanelDataProcessed, options: { flowHistogramOptions: FlowHistogramOptionsProps }) => {\n\n    const stacked = options.flowHistogramOptions.mode.label === 'Stacked'\n    const horizontal = options.flowHistogramOptions.direction.label === 'Horizontal'\n    const container = null //options.flowHistogramOptions.position.label === 'Under Graph' ? $('.flow-histogram-legend-bottom') : $('.flow-histogram-legend-right') \n    const noColumns = options.flowHistogramOptions.position.label === 'Under Graph' ? 5 : 1\n    const showLegend = options.flowHistogramOptions.showLegend\n    const legendPosition = options.flowHistogramOptions.position.value\n\n    const yaxis = {\n        mode: 'categories',\n        tickLength: 0,\n        ticks: stacked ? processedData.stackedData?.ticks : processedData.separateData?.ticks,\n        autoscaleMargin: 0.02,\n    }\n\n    const configOptions: any = {\n        legend: {\n            show: showLegend,\n            container: container,\n            position: legendPosition,\n            backgroundOpacity: 0,\n            noColumns: noColumns,\n            labelFormatter: (label, series) => { return '<a style=\"margin:3px\" >' + label + '</a>'; }\n        },\n        series: {\n            bars: {\n                align: \"center\",\n                barWidth: 0.6,\n                fill: 0.8,\n                horizontal: horizontal,\n                lineWidth: 1,\n                show: true,\n            },\n            stack: stacked,\n        },\n        grid: {\n            borderWidth: 0,\n        },\n        xaxis: horizontal ? {} : yaxis,\n        yaxis: horizontal ? yaxis : {}\n    }\n\n    return configOptions\n}\n\nexport const getLabeledValues = (data, options: { flowHistogramOptions: FlowHistogramOptionsProps }): FlowPanelDataProcessed => {\n\n    let labeledValues: FlowPanelDataProcessed = {}\n    const unitInfo: FlowPanelUnitInfo = UnitInfo(options, data?.series)\n\n    // I believe should be just one data series in this case since this work together with asTableSummary function\n    if (data && data.series && data.series.length === 1) {\n        const sd = data.series[0]\n        const metric = sd && sd.meta && sd.meta.custom ? sd.meta.custom['metric'] : undefined;\n        const stacked = options.flowHistogramOptions.mode.label === 'Stacked'\n        const horizontal = options.flowHistogramOptions.direction.label === 'Horizontal'\n        const rate = options.flowHistogramOptions.display.label === 'Rate'\n        const toBits = sd.meta.custom['toBits'] ? true : false\n        const inLabel = toBits ? 'Bits In' : 'Bytes In'\n        const outLabel = toBits ? 'Bits Out' : 'Bytes Out'\n        const inByData: any[] = getSeriesMetricValues(sd.fields, inLabel)\n        const outByData: any[] = getSeriesMetricValues(sd.fields, outLabel)\n\n        let inResult: any[] = []// [bytes, metric]\n        let outResult: any[] = [] // [bytes, metric]\n        let stackedResult: any[] = []\n        let metricLabels: any[] = []\n\n        if (!metric) {\n            return labeledValues;\n        }\n\n        let labelFunction\n        switch (metric) {\n            case 'Applications':\n                metricLabels = getSeriesMetricValues(sd.fields, 'Application')\n                labelFunction = name => name\n                break\n            case 'Hosts':\n                metricLabels = getSeriesMetricValues(sd.fields, 'Host')\n                labelFunction = name => name\n                break\n            case 'Conversations':\n                metricLabels = getSeriesMetricValues(sd.fields, 'Application')\n                const sourceLabels = getSeriesMetricValues(sd.fields, 'Source')\n                const destLabels = getSeriesMetricValues(sd.fields, 'Dest.')\n                labelFunction = (name: string, idx: number): string => {\n                    return sourceLabels[idx] + ' <-> ' + destLabels[idx] + ' [' + (name ? name : 'Unknown') + ']'\n                }\n                break\n        }\n\n        const indexedMetricLabels = getIndexedMetricLabels(metricLabels, labelFunction, stacked)\n        const timeRangeInSeconds = moment.duration(data.timeRange.to.diff(data.timeRange.from)).asSeconds();\n\n        if (!stacked) {\n            inResult = getSeparatedResultData(inByData, indexedMetricLabels, horizontal, unitInfo, rate, timeRangeInSeconds)\n            outResult = getSeparatedResultData(outByData, indexedMetricLabels, horizontal, unitInfo, rate, timeRangeInSeconds)\n\n        } else {\n            stackedResult = getStackedResultData(indexedMetricLabels, inByData, outByData, horizontal, unitInfo, rate, timeRangeInSeconds)\n        }\n\n        labeledValues = {\n            separateData: {\n                inByLabel: inResult,\n                outByLabel: outResult,\n                ticks: indexedMetricLabels\n            },\n            stackedData: {\n                metricsByLabel: stackedResult,\n                ticks: [[FlowDataDirection.dataIn.value, FlowDataDirection.dataIn.label], [FlowDataDirection.dataOut.value, FlowDataDirection.dataOut.label]]\n            }\n        }\n    } else {\n        throw new Error('Only one query is permitted in this panel');\n    }\n\n    return labeledValues\n}\n\n/**\n * Returns and array of [index, label] \n * where index is the record position in the original data and the label to be displayed in the graph\n * @param metricLabels \n * @param labelFunction \n * @param stacked \n * @returns \n */\nexport const getIndexedMetricLabels = (metricLabels: any[], labelFunction, stacked: boolean) => {\n    return metricLabels.map((label, idx) => [idx, labelFunction(label, idx)])\n}\n\n/**\n * Gets the final data formatted to be passed into the plot function \n * based in graph direction (vertical, horizontal) and mode (separated or stacked)\n * @param data \n * @param indexedLabels \n * @param horizontal \n * @param stacked \n * @returns \n */\nexport const getSeparatedResultData = (data: any[], indexedLabels: any[], horizontal: boolean, unitInfo: FlowPanelUnitInfo, rate: boolean, timeRangeInSeconds: number) => {\n    const divisor = rate ? unitInfo.divisor * timeRangeInSeconds : unitInfo.divisor\n    return indexedLabels.map((il) => {\n        const index = il[DataPosition.indexLabel.index]\n        const value = data[index] / divisor\n        return horizontal ? [value, index] : [index, value]\n    })\n}\n\nexport const getStackedResultData = (indexedMetricLabels: any[], inByData: any[], outByData: any[], horizontal: boolean, unitInfo: FlowPanelUnitInfo, rate: boolean, timeRangeInSeconds: number): any[] => {\n    const divisor = rate ? unitInfo.divisor * timeRangeInSeconds : unitInfo.divisor\n    return indexedMetricLabels.map((imLabel) => {\n        const index = imLabel[DataPosition.indexLabel.index]\n        const label = imLabel[DataPosition.indexLabel.label]\n        const inData = inByData[index] / divisor\n        const outData = outByData[index] / divisor\n        return horizontal ?\n            { label: label, data: [[inData, FlowDataDirection.dataIn.value], [outData, FlowDataDirection.dataOut.value]] } :\n            { label: label, data: [[FlowDataDirection.dataIn.value, inData], [FlowDataDirection.dataOut.value, outData]] }\n    })\n}\n\nexport const getSeriesMetricValues = (fields: any[], name: string) => {\n    let match = fields.find(f => f.name === name)\n    if (match && match.values) {\n        return match.values.toArray()\n    }\n    else { return [] }\n}\n\nexport const setLegend = (options: { flowHistogramOptions: FlowHistogramOptionsProps }) => {\n    if (options.flowHistogramOptions.showLegend) {\n        const className = options.flowHistogramOptions.position.label === 'Under Graph' ? '.flow-histogram-legend-bottom' : '.flow-histogram-legend-right'\n        const legend = $('.legend')\n        if (legend && legend.html()) {\n            $(className).html('')\n            $(className).append(legend.html())\n            legend.remove()\n        }\n    }\n}\n\nexport const validateFlowHistogramPanelData = (dataSeries: DataFrame[]) => {\n    if (!dataSeries || dataSeries.length < 1) {\n        console.log('No data, check the datasource is flow-datasource and function asSummaryTable are selected')\n        return false\n    }\n\n    const series = dataSeries[0]\n\n    if (!series.meta || !series.meta?.custom) {\n        console.log('Incorrect or incomplete data, check the datasource is flow-datasource and function asSummaryTable are selected')\n        return false\n    }\n\n    return true\n}\n\nexport const getStyleFor = (element: FlowHistogramElement, height: number, width: number, options: { flowHistogramOptions: FlowHistogramOptionsProps }): CSSProperties => {\n    const isUnderGraph = options.flowHistogramOptions.position.label === 'Under Graph'\n    const showLegend = options.flowHistogramOptions.showLegend\n\n    switch (element) {\n        case FlowHistogramElement.Container:\n            return {\n                display: showLegend && isUnderGraph ? 'block' : 'inline-block',\n                float: showLegend && isUnderGraph ? 'none' : 'left'\n            }\n        case FlowHistogramElement.Legend:\n            const widthOffset = options.flowHistogramOptions.direction.label === 'Horizontal' ? 0 : 25\n            const blockValue = isUnderGraph ? 'block' : 'inline-block'\n            return {\n                display: showLegend ? blockValue : 'none',\n                width: isUnderGraph ? width : (width * 0.2) - widthOffset,\n                height: isUnderGraph ? options.flowHistogramOptions.height : height,\n                float: isUnderGraph ? 'none' : 'left'\n            }\n        case FlowHistogramElement.ContainerGraph:\n            const heightOffset = (showLegend && isUnderGraph) ? options.flowHistogramOptions.height : 0\n\n            return {\n                width: !showLegend || isUnderGraph ? width : width * 0.8,\n                height: height - 25 - heightOffset\n            }\n        case FlowHistogramElement.GraphAxisLabel:\n            return {\n                height: 25,\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n            }\n        case FlowHistogramElement.GraphAxisLabelUnit:\n            return {\n                marginTop: 24 \n            }\n    }\n}\n\nexport enum FlowHistogramElement {\n    Container,\n    ContainerGraph,\n    GraphAxisLabel,\n    GraphAxisLabelUnit,\n    Legend\n}\n","import { FlowHistogramOptionsProps, FlowPanelUnitInfo } from './FlowHistogramTypes'\nimport { validateFlowHistogramPanelData } from './FlowHistogramHelpers'\nimport { DataFrame } from '@grafana/data'\n\nexport const DirectionOptions = [\n    { label: 'Horizontal', value: '0' },\n    { label: 'Vertical', value: '1' }\n]\n\nexport const UnitOptions = [\n    { label: 'B', value: '0' },\n    { label: 'KB', value: '1' },\n    { label: 'MB', value: '2' },\n    { label: 'GB', value: '3' },\n]\n\nexport const DisplayOptions = [\n    { label: 'Total', value: '0' },\n    { label: 'Rate', value: '1' },\n]\n\nexport const ModeOptions = [\n    { label: 'Separate', value: '0' },\n    { label: 'Stacked', value: '1' },\n]\n\nexport const PositionOptions = [\n    { label: 'Right Side', value: '' },\n    { label: 'Under Graph', value: '' },\n]\n\nexport const UnitInfo = (options: { flowHistogramOptions: FlowHistogramOptionsProps }, dataSeries: DataFrame[]): FlowPanelUnitInfo => {\n    let divisor = 1\n    let units = 'Bytes'\n    \n    if (!validateFlowHistogramPanelData(dataSeries)){\n        return { units, divisor }\n    }\n    \n    const toBits = dataSeries?.[0]?.meta?.custom?.['toBits'] ? true : false\n    const rate = options.flowHistogramOptions.display.label === 'Rate'\n    const option = options.flowHistogramOptions.units.label\n    \n    switch (option) {\n        case 'B':\n            units = toBits ? 'Bits' : 'Bytes'\n            break\n        case 'KB':\n            divisor = 1024\n            units = toBits ? 'Kb' : 'KB'\n            break\n        case 'MB':\n            divisor = 1024 ** 2\n            units = toBits ? 'Mb' : 'MB'\n            break\n        case 'GB':\n            divisor = 1024 ** 3\n            units = toBits ? 'Gb' : 'GB'\n            break\n    }\n\n    if (rate) {\n        units = units + '/s'\n    }\n\n    return { units, divisor }\n}\n\nexport const DataPosition = {\n    horizontal: {\n        value: 0,\n        index: 0,\n        metric: 1\n    },\n    vertical: {\n        value: 1,\n        index: 1,\n        metric: 0\n    },\n    indexLabel: {\n        index: 0,\n        label: 1\n    }\n}\n\nexport const FlowDataDirection = {\n    dataIn: { label: 'In', value: 0 },\n    dataOut: { label: 'Out', value: 1 }\n}\n","import React from 'react'\nimport { InlineField } from '@grafana/ui'\n\ninterface InlineFieldProps {\n    label: string;\n    children: React.ReactElement<any, string | React.JSXElementConstructor<any>> & React.ReactNode\n}\n\nexport const OnmsInlineField: React.FC<InlineFieldProps> = ({ children, ...props }) => {\n    return (\n        <>\n            <style>\n                {\n                    `\n                        .onms-inline-field > label{\n                            width:160px;\n                        }\n                    `\n                }\n            </style>\n            <InlineField {...props} className='onms-inline-field'>\n                {children}\n            </InlineField>\n        </>\n    )\n}\n","import React from 'react'\n\nexport interface SwitchBoxProps {\n    className?: string\n    children: React.ReactNode\n}\n\nexport const SwitchBox: React.FC<SwitchBoxProps> = ({className = undefined, children }) => {\n    return (\n        <div className={className} style={{ display: 'flex', alignItems: 'center', height: 32, width: 32 }}>\n            {children}\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { PanelOptionsEditorProps } from '@grafana/data'\nimport { Input, Select, Switch } from '@grafana/ui'\nimport { OnmsInlineField } from 'components/OnmsInlineField'\nimport { SwitchBox } from 'components/SwitchBox'\nimport { DirectionOptions, DisplayOptions, ModeOptions, PositionOptions, UnitOptions } from './FlowHistogramConstants'\nimport { FlowHistogramOptionsProps } from './FlowHistogramTypes'\n\ninterface FlowHistogramProps {\n}\n\nexport const FlowHistogramOptions: React.FC<PanelOptionsEditorProps<FlowHistogramProps>> = ({ onChange, context }) => {\n    const [options, setOptions] = useState<FlowHistogramOptionsProps>({\n        direction: context.options?.flowHistogramOptions?.direction || DirectionOptions[0],\n        units: context.options?.flowHistogramOptions?.units || UnitOptions[0],\n        display: context.options?.flowHistogramOptions?.display || DisplayOptions[0],\n        mode: context.options?.flowHistogramOptions?.mode || ModeOptions[0],\n        showLegend: context.options?.flowHistogramOptions?.showLegend || true,\n        position: context.options?.flowHistogramOptions?.position || PositionOptions[0],\n        height: context.options?.flowHistogramOptions?.height || 42\n    })\n\n    const updateOptions = (value: any, key: string) => {\n        setOptions((oldOptions) => {\n            const newOptions = { ...oldOptions }\n            newOptions[key] = value;\n            return newOptions\n        })\n    }\n    useEffect(() => {\n        onChange(options)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [options])\n\n    return (\n        <div>\n            <p style={{ marginTop: 12, marginBottom: 3 }}>General</p>\n            <OnmsInlineField label='Direction'>\n                <Select options={DirectionOptions}\n                    value={options?.direction}\n                    onChange={(e) => updateOptions(e, 'direction')}\n                />\n            </OnmsInlineField>\n            <OnmsInlineField label='Units'>\n                <Select options={UnitOptions}\n                    value={options?.units}\n                    onChange={(e) => updateOptions(e, 'units')}\n                />\n            </OnmsInlineField>\n            <OnmsInlineField label='Display'>\n                <Select options={DisplayOptions}\n                    value={options?.display}\n                    onChange={(e) => updateOptions(e, 'display')}\n                />\n            </OnmsInlineField>\n            <OnmsInlineField label='Mode'>\n                <Select options={ModeOptions}\n                    value={options?.mode}\n                    onChange={(e) => updateOptions(e, 'mode')}\n                />\n            </OnmsInlineField>\n\n            <p style={{ marginTop: 20, marginBottom: 3 }}>Legend</p>\n            <OnmsInlineField label='Show Legend'>\n                <SwitchBox>\n                    <Switch\n                        value={options?.showLegend}\n                        onChange={() => updateOptions(!options?.showLegend, 'showLegend')} />\n                </SwitchBox>\n            </OnmsInlineField>\n            <OnmsInlineField label='Position'>\n                <Select options={PositionOptions}\n                    value={options?.position}\n                    onChange={(e) => updateOptions(e, 'position')}\n                />\n            </OnmsInlineField>\n            <OnmsInlineField label='Height'>\n                <Input type='number' max={75} min={20} value={options?.height} onChange={(e) => updateOptions((Number.parseInt(e.currentTarget.value, 10) > 0 ? e.currentTarget.value : 0), 'height')} />\n            </OnmsInlineField>\n        </div>\n    )\n}\n","import { PanelPlugin } from '@grafana/data';\nimport { FlowHistogramControl } from './FlowHistogramControl'\nimport { FlowHistogramOptions } from './FlowHistogramOptions'\n\nexport const plugin = new PanelPlugin(FlowHistogramControl).setPanelOptions((builder) => {\n    builder.addCustomEditor({ id: 'flow-histogram-options', path: 'flowHistogramOptions', name: 'Flow Histogram Panel', editor: FlowHistogramOptions })\n});\n","import React, { useEffect, useRef } from 'react'\nimport { PanelProps } from '@grafana/data'\nimport { UnitInfo } from './FlowHistogramConstants'\nimport {\n    FlowHistogramElement,\n    getFlowHistogramPlotConfig,\n    getFlowHistogramPlotData,\n    getLabeledValues,\n    getStyleFor,\n    setLegend,\n    validateFlowHistogramPanelData\n} from './FlowHistogramHelpers'\nimport { FlowHistogramOptionsProps } from './FlowHistogramTypes'\n\ninterface FlowHistogramControlOptions { flowHistogramOptions: FlowHistogramOptionsProps }\ninterface Props extends PanelProps<FlowHistogramControlOptions> { }\n\nexport const FlowHistogramControl: React.FC<Props> = ({ data, height, width, options }) => {\n    const ref: any = useRef();\n\n    useEffect(() => {\n        if (validateFlowHistogramPanelData(data?.series)) {\n          const processedData = getLabeledValues(data, options)\n          const plotData = getFlowHistogramPlotData(processedData, options)\n          const plotConfig = getFlowHistogramPlotConfig(processedData, options)\n\n          $.plot(ref.current, plotData, plotConfig)\n\n          // TODO: remove this fix once flot library is updated in grafana. Use container option in plotConfig instead\n          setLegend(options)\n        }\n    }, [data, width, height, ref, options]);\n\n    return (\n        <>\n            <style>\n                {\n                    `\n                   .side-spot {\n                        margin-left: 25px;\n                        position: relative;\n                    }                                     \n                    .side-spot .side-spot-label {\n                        transform: rotate(-90deg) translateY(-50%);\n                        transform-origin: center;\n                        top: 42%;\n                        position: absolute;\n                        width: 0;\n                    }\n                    .legendColorBox {\n                        padding-right: 3px;\n                    }\n                    .legendLabel {\n                        color: rgb(204, 204, 220);\n                    }\n                    .side-spot table {\n                        height: ${options.flowHistogramOptions.height}px;\n                    }\n                    .flow-histogram-legend-right table {\n                        margin: 0 auto;\n                    }\n                `\n                }\n            </style>\n            <div>\n                <div className={options.flowHistogramOptions.direction.label === 'Horizontal' ? '' : 'side-spot'}\n                    style={getStyleFor(FlowHistogramElement.Container, height, width, options)}>\n                    <div ref={ref} style={getStyleFor(FlowHistogramElement.ContainerGraph, height, width, options)} />\n                    <div className='side-spot-label' style={getStyleFor(FlowHistogramElement.GraphAxisLabel, height, width, options)}>\n                        <p style={getStyleFor(FlowHistogramElement.GraphAxisLabelUnit, height, width, options)}>{UnitInfo(options, data?.series).units}</p>\n                    </div>\n                </div>\n                <div className={(options.flowHistogramOptions.position.label === 'Under Graph' ? 'flow-histogram-legend-bottom' : 'flow-histogram-legend-right')}\n                    style={getStyleFor(FlowHistogramElement.Legend, height, width, options)} />\n            </div>\n        </>\n    )\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__3305__","__WEBPACK_EXTERNAL_MODULE__7388__","__WEBPACK_EXTERNAL_MODULE__8283__","__WEBPACK_EXTERNAL_MODULE__2650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","getSeparatedResultData","data","indexedLabels","horizontal","unitInfo","rate","timeRangeInSeconds","divisor","map","il","index","DataPosition","indexLabel","getSeriesMetricValues","fields","name","match","find","f","values","toArray","validateFlowHistogramPanelData","dataSeries","series","length","console","log","meta","custom","getStyleFor","element","height","width","options","isUnderGraph","flowHistogramOptions","position","label","showLegend","FlowHistogramElement","Container","display","float","Legend","widthOffset","direction","ContainerGraph","GraphAxisLabel","justifyContent","alignItems","GraphAxisLabelUnit","marginTop","DirectionOptions","UnitOptions","DisplayOptions","ModeOptions","PositionOptions","UnitInfo","units","toBits","metric","vertical","FlowDataDirection","dataIn","dataOut","OnmsInlineField","children","props","style","InlineField","className","SwitchBox","div","FlowHistogramOptions","onChange","context","setOptions","useState","mode","updateOptions","oldOptions","newOptions","useEffect","p","marginBottom","Select","e","Switch","Input","type","max","min","Number","parseInt","currentTarget","plugin","PanelPlugin","ref","useRef","processedData","labeledValues","Error","sd","stacked","inLabel","outLabel","inByData","outByData","labelFunction","inResult","outResult","stackedResult","metricLabels","sourceLabels","destLabels","idx","indexedMetricLabels","getIndexedMetricLabels","moment","timeRange","to","diff","from","asSeconds","imLabel","inData","outData","getStackedResultData","separateData","inByLabel","outByLabel","ticks","stackedData","metricsByLabel","getLabeledValues","plotData","inSeriesData","bars","show","barWidth","align","getFlowHistogramPlotData","plotConfig","noColumns","legendPosition","yaxis","tickLength","autoscaleMargin","legend","container","backgroundOpacity","labelFormatter","fill","lineWidth","stack","grid","borderWidth","xaxis","getFlowHistogramPlotConfig","$","plot","current","html","append","remove","setLegend","setPanelOptions","builder","addCustomEditor","id","path","editor"],"sourceRoot":""}
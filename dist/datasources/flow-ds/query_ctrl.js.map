{"version":3,"sources":["../../../src/datasources/flow-ds/query_ctrl.js"],"names":["QueryCtrl","_","Gfuncs","FlowDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","parseTarget","segments","functions","error","target","metric","push","getSegmentForValue","map","f","funcDef","getFuncDef","name","func","createFuncInstance","i","parameters","length","updateParam","newSelectMetric","value","undefined","render","Promise","resolve","newFunc","withDefaultParams","added","targetChanged","without","oldTarget","updateModelTarget","lastSegment","panelCtrl","refresh","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\n\nimport './add_opennms_func';\nimport './func_editor';\nimport {Gfuncs} from \"./flow_functions\";\nimport './css/query-editor.css!';\n\nexport class FlowDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.parseTarget();\n  }\n\n  parseTarget() {\n    this.segments = [];\n    this.functions = [];\n    this.error = null;\n\n    if (this.target) {\n      if (this.target.metric) {\n        this.segments.push(this.uiSegmentSrv.getSegmentForValue(this.target.metric));\n      }\n\n      if (this.target.functions) {\n        this.functions = _.map(this.target.functions, function (f) {\n          let funcDef = Gfuncs.getFuncDef(f.name);\n          let func = Gfuncs.createFuncInstance(funcDef);\n          for (let i = 0; i < f.parameters.length; i++) {\n            func.updateParam(f.parameters[i], i);\n          }\n          return func;\n        });\n      }\n    }\n\n    if (this.segments.length === 0) {\n      this.segments.push(this.uiSegmentSrv.newSelectMetric());\n    }\n  }\n\n  updateModelTarget() {\n    this.target.metric = this.segments.length > 0 ? this.segments[0].value : undefined;\n    this.target.functions = _.map(this.functions, function (f) {\n      return f.render();\n    });\n  }\n\n  getAltSegments() {\n    return Promise.resolve([\n      {value: 'conversations'},\n      {value: 'applications'}\n    ]);\n  }\n\n  addFunction(funcDef) {\n    let newFunc = Gfuncs.createFuncInstance(funcDef, {withDefaultParams: true});\n    newFunc.added = true;\n    this.functions.push(newFunc);\n    this.targetChanged();\n  }\n\n  removeFunction(func) {\n    this.functions = _.without(this.functions, func);\n    this.targetChanged();\n  }\n\n  targetChanged() {\n    if (this.error) {\n      return;\n    }\n\n    let oldTarget = this.target.target;\n    this.updateModelTarget();\n\n    if (this.target.target !== oldTarget) {\n      let lastSegment = this.segments.length > 0 ? this.segments[this.segments.length - 1] : {};\n      if (lastSegment.value !== 'select metric') {\n        this.panelCtrl.refresh();\n      }\n    }\n\n    this.refresh();\n  }\n\n  refreshMetricData() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nFlowDatasourceQueryCtrl.templateUrl = 'datasources/flow-ds/partials/query.editor.html';\n"]}
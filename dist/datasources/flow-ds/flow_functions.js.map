{"version":3,"sources":["../../../src/datasources/flow-ds/flow_functions.js"],"names":["addFuncDef","funcDef","params","defaultParams","category","push","index","name","shortName","FuncInstance","options","def","withDefaultParams","slice","updateText","_","categories","Combine","Filter","Transform","type","each","funcList","catName","sortBy","prototype","render","metricExp","parameters","map","value","paramType","$","isNumeric","bind","_hasMultipleParamsInString","strValue","indexOf","optional","updateParam","split","partVal","idx","trim","splice","length","text","join","Gfuncs","isString","message","graphiteVersion","filteredCategories","functions"],"mappings":"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","file":"flow_functions.js","sourcesContent":["import _ from 'lodash';\n\nlet index = [];\nlet categories = {\n  Combine: [],\n  Filter: [],\n  Transform: []\n};\n\nfunction addFuncDef(funcDef) {\n  funcDef.params = funcDef.params || [];\n  funcDef.defaultParams = funcDef.defaultParams || [];\n\n  if (funcDef.category) {\n    funcDef.category.push(funcDef);\n  }\n  index[funcDef.name] = funcDef;\n  index[funcDef.shortName || funcDef.name] = funcDef;\n}\n\n// Combine\n\naddFuncDef({\n  name: 'topN',\n  category: categories.Combine,\n  params: [{name: \"n\", type: \"int\",}],\n  defaultParams: [10]\n});\n\naddFuncDef({\n  name: 'includeOther',\n  category: categories.Combine\n});\n\n// Filter\n\naddFuncDef({\n  name: 'withExporterNode',\n  category: categories.Filter,\n  params: [{name: \"nodeCriteria\", type: \"string\"}]\n});\n\naddFuncDef({\n  name: 'withIfIndex',\n  category: categories.Filter,\n  params: [{name: \"ifIndex\", type: \"int\"}]\n});\n\n// Transform\n\naddFuncDef({\n  name: 'perSecond',\n  category: categories.Transform\n});\n\naddFuncDef({\n  name: 'negativeEgress',\n  category: categories.Transform\n});\n\naddFuncDef({\n  name: 'negativeIngress',\n  category: categories.Transform\n});\n\naddFuncDef({\n  name: 'asTableSummary',\n  category: categories.Transform\n});\n\naddFuncDef({\n  name: 'combineIngressEgress',\n  category: categories.Transform\n});\n\n_.each(categories, function (funcList, catName) {\n  categories[catName] = _.sortBy(funcList, 'name');\n});\n\nfunction FuncInstance(funcDef, options) {\n  this.def = funcDef;\n  this.params = [];\n\n  if (options && options.withDefaultParams) {\n    this.params = funcDef.defaultParams.slice(0);\n  }\n\n  this.updateText();\n}\n\nFuncInstance.prototype.render = function (metricExp) {\n  return {\n    name: this.def.name,\n    parameters: _.map(this.params, function (value, index) {\n      let paramType = this.def.params[index].type;\n      if (paramType === 'int' || paramType === 'value_or_series' || paramType === 'boolean') {\n        return value;\n      }\n      else if (paramType === 'int_or_interval' && $.isNumeric(value)) {\n        return value;\n      }\n      return value;\n    }.bind(this))\n  };\n};\n\nFuncInstance.prototype._hasMultipleParamsInString = function (strValue, index) {\n  if (strValue.indexOf(',') === -1) {\n    return false;\n  }\n\n  return this.def.params[index + 1] && this.def.params[index + 1].optional;\n};\n\nFuncInstance.prototype.updateParam = function (strValue, index) {\n  // handle optional parameters\n  // if string contains ',' and next param is optional, split and update both\n  if (this._hasMultipleParamsInString(strValue, index)) {\n    _.each(strValue.split(','), function (partVal, idx) {\n      this.updateParam(partVal.trim(), index + idx);\n    }.bind(this));\n    return;\n  }\n\n  if (strValue === '' && this.def.params[index].optional) {\n    this.params.splice(index, 1);\n  }\n  else {\n    this.params[index] = strValue;\n  }\n\n  this.updateText();\n};\n\nFuncInstance.prototype.updateText = function () {\n  if (this.params.length === 0) {\n    this.text = this.def.name + '()';\n    return;\n  }\n\n  let text = this.def.name + '(';\n  text += this.params.join(', ');\n  text += ')';\n  this.text = text;\n};\n\nexport class Gfuncs {\n  static createFuncInstance(funcDef, options) {\n    if (_.isString(funcDef)) {\n      if (!index[funcDef]) {\n        throw {message: 'Method not found ' + name};\n      }\n      funcDef = index[funcDef];\n    }\n    return new FuncInstance(funcDef, options);\n  }\n\n  static getFuncDef(name) {\n    return index[name];\n  };\n\n  static getCategories(graphiteVersion) {\n    let filteredCategories = {};\n    _.each(categories, function (functions, category) {\n      if (functions.length) {\n        filteredCategories[category] = functions;\n      }\n    });\n\n    return filteredCategories;\n  }\n}\n"]}
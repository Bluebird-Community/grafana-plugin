{"version":3,"sources":["../../src/spec/template_srv.js"],"names":["_","TemplateSrv","variables","grafanaVariables","index","regex","updateTemplateData","i","length","variable","current","isNone","value","name","format","formatValue","Error","join","isArray","expression","lastIndex","match","exec","allValue","values","options","push","target","scopedVars","systemValue","replace","var1","var2","fmt2","var3","fmt3","isAllValue","getAllValue","res","Array"],"mappings":"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","file":"template_srv.js","sourcesContent":["import _ from 'lodash';\n\nexport class TemplateSrv {\n  constructor() {\n    this.variables = [];\n    this.grafanaVariables = {};\n    this.index = {};\n    /*\n     * This regex matches 3 types of variable reference with an optional format specifier\n     * \\$(\\w+)                          $var1\n     * \\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]    [[var2]] or [[var2:fmt2]]\n     * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\n    */\n    this.regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?::(\\w+))?}/g;\n  }\n\n  init(variables) {\n    this.variables = variables;\n    this.updateTemplateData();\n  }\n\n  updateTemplateData() {\n    this.index = {};\n\n    for (var i = 0; i < this.variables.length; i++) {\n      var variable = this.variables[i];\n\n      if (!variable.current || (!variable.current.isNone && !variable.current.value)) {\n        continue;\n      }\n\n      this.index[variable.name] = variable;\n    }\n  }\n\n  formatValue(value, format, variable) {\n    // for some scopedVars there is no variable\n    variable = variable || {};\n\n    if (typeof format === 'function') {\n      return format(value, variable, this.formatValue);\n    }\n\n    switch (format) {\n      case 'regex': {\n        throw new Error('not supported');\n      }\n      case 'lucene': {\n        throw new Error('not supported');\n      }\n      case 'pipe': {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return value.join('|');\n      }\n      case 'distributed': {\n        throw new Error('not supported');\n      }\n      default: {\n        if (_.isArray(value)) {\n          return '{' + value.join(',') + '}';\n        }\n        return value;\n      }\n    }\n  }\n\n  getVariableName(expression) {\n    this.regex.lastIndex = 0;\n    var match = this.regex.exec(expression);\n    if (!match) {\n      return null;\n    }\n    return match[1] || match[2];\n  }\n\n  getAllValue(variable) {\n    if (variable.allValue) {\n      return variable.allValue;\n    }\n    var values = [];\n    for (var i = 1; i < variable.options.length; i++) {\n      values.push(variable.options[i].value);\n    }\n    return values;\n  }\n\n  replace(target, scopedVars, format) {\n    if (!target) {\n      return target;\n    }\n\n    var variable, systemValue, value;\n    this.regex.lastIndex = 0;\n\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3, fmt3) => {\n      variable = this.index[var1 || var2 || var3];\n      format = fmt2 || fmt3 || format;\n      if (scopedVars) {\n        value = scopedVars[var1 || var2 || var3];\n        if (value) {\n          return this.formatValue(value.value, format, variable);\n        }\n      }\n    \n      if (!variable) {\n        return match;\n      }\n    \n      systemValue = this.grafanaVariables[variable.current.value];\n      if (systemValue) {\n        return this.formatValue(systemValue, format, variable);\n      }\n    \n      value = variable.current.value;\n      if (this.isAllValue(value)) {\n        value = this.getAllValue(variable);\n        // skip formating of custom all values\n        if (variable.allValue) {\n          return value;\n        }\n      }\n    \n      var res = this.formatValue(value, format, variable);\n      return res;\n    });\n  }\n\n  isAllValue(value) {\n    return value === '$__all' || (Array.isArray(value) && value[0] === '$__all');\n  }\n\n}\n\nexport default new TemplateSrv();"]}